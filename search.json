[{"path":"https://RConsortium.github.io/OOP-WG/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 R7 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/case_studies.html","id":"person-class","dir":"Articles","previous_headings":"","what":"Person class","title":"Case Studies","text":"case study demonstrates creating basic classes accessors functions, inheritance composition. can modify objects creation assigning property. Unlike S4 validity automatically checked assignment, just object creation. Classes can inherit parent class parent contain properties complex classes.","code":"Person <- new_class(\"Person\",   properties = list(     name = \"character\",     new_property(       name = \"birthdate\",       class = s3_class(\"Date\"),       setter = function(object, value) {         object@birthdate <- as.Date(value)         object       }     ),     new_property(       name = \"age\",       class = \"numeric\",       getter = function(object) {         # This is not correct because of leap years,         # see https://stackoverflow.com/questions/3611314/calculate-ages-in-r/25450756#25450756 for a correct implementation.         as.double(Sys.Date() - object@birthdate) %/% 365       }     )   ),   validator = function(object) {     if (length(object@name) != length(object@birthdate)) {       \"@name and @birthdate must be the same length\"     }   },   constructor = function(name, birthdate = NA) {     birthdate <- as.Date(birthdate)     new_object(name = name, birthdate = birthdate)   } )  jane <- Person(name = \"Jane Doe\")  jane@name #> [1] \"Jane Doe\"  jane@age #> [1] NA jane@birthdate <- \"1982-03-04\"  jane@age #> [1] 39  jane@birthdate <- as.Date(c(\"2001-01-01\", \"2002-02-02\")) #> Error: <Person> object is invalid: #> - @name and @birthdate must be the same length Employee <- new_class(\"Employee\",   parent = Person,   properties = list(boss = Person) )  x <- Employee(name = \"John Smith\", birthdate = \"1992-10-11\", boss = jane)  x@name #> [1] \"John Smith\"  x@age #> [1] 29  x@boss #> <Person/R7_object> #> @ name     :  chr \"Jane Doe\" #> @ birthdate:  Date[1:1], format: \"1982-03-04\" #> @ age      :  num 39"},{"path":"https://RConsortium.github.io/OOP-WG/articles/case_studies.html","id":"annotated-data-frame","dir":"Articles","previous_headings":"","what":"Annotated Data Frame","title":"Case Studies","text":"case study implements basic imitation SummarizedExperiment class used widely Bioconductor community. annotated_df class normal R data.frame two additional properties - rows holds data.frame containing data rows data. - columns holds data.frame containing data columns data. validator function automatically ensures consistency size data size corresponding rows columns. particular number rows rows property matches number rows data, number rows columns property matches number columns data. definition class. print method tells us R7 class gives us types properties class. instantiate instance annotated_df first need get data put . example use mtcars dataset. requires manipulation get rows columns data right formats. can create instance using constructor function. next define R7_subset generic function, R7 method function, taking integer arguments rows columns. subsets individual components appropriately returns new annotated_df object . subset using function can see consistency retained data components. validation function automatically run try change property, ensures class integrity.","code":"tbl_df <- s3_class(c(\"tbl_df\", \"tbl\", \"data.frame\"))  annotated_df <- new_class(\"annotated_df\",   properties = list(     data = tbl_df,     rows = tbl_df,     columns = tbl_df   ),   validator = function(object) {     if (nrow(object@data) != nrow(object@rows)) {       \"`nrow(<annotated_df>@rows)` must be equal to `nrow(<annotated_df>)`\"     } else if (ncol(object@data) != nrow(object@columns)) {       \"`nrow(<annotated_df>@columns)` must be equal to `ncol(<annotated_df>)`\"     }   } ) annotated_df #> <R7_class> #> @ name  :  annotated_df #> @ parent: <R7_object> #> @ properties: #>  $ data   : <tbl_df> #>  $ rows   : <tbl_df> #>  $ columns: <tbl_df> mt <- mtcars[seq(1, 32, 4), ]  splits <- strsplit(rownames(mt), \" \")  mt <- tibble::as_tibble(mt)  vcapply <- function(VALUE, FUN, ...) vapply(VALUE, FUN, character(1), ...)  row_info <- tibble::tibble(   make = vcapply(splits, head, 1),   model = vcapply(splits, function(x) paste0(tail(x, -1), collapse = \" \")) )  col_desc <- c(   \"mpg\" = \"Miles/(US) gallon\",   \"cyl\" = \"Number of cylinders\",   \"disp\" = \"Displacement (cu.in.)\",   \"hp\" = \"Gross horsepower\",   \"drat\" = \"Rear axle ratio\",   \"wt\" = \"Weight (1000 lbs)\",   \"qsec\" = \"1/4 mile time\",   \"vs\" = \"Engine (0 = V-shaped, 1 = straight)\",   \"am\" = \"Transmission (0 = automatic, 1 = manual)\",   \"gear\" = \"Number of forward gears\",   \"carb\" = \"Number of carburetors\" )  col_info <- tibble::tibble(name = names(col_desc), description = col_desc) obj <- annotated_df(mt, row_info, col_info) obj@data #> # A tibble: 8 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 2  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #> 3  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 4  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 #> 5  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 #> 6  21.5     4  120.    97  3.7   2.46  20.0     1     0     3     1 #> 7  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2 #> 8  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4  obj@rows #> # A tibble: 8 × 2 #>   make     model      #>   <chr>    <chr>      #> 1 Mazda    RX4        #> 2 Hornet   Sportabout #> 3 Merc     230        #> 4 Merc     450SL      #> 5 Chrysler Imperial   #> 6 Toyota   Corona     #> 7 Pontiac  Firebird   #> 8 Ford     Pantera L  obj@columns #> # A tibble: 11 × 2 #>    name  description                              #>    <chr> <chr>                                    #>  1 mpg   Miles/(US) gallon                        #>  2 cyl   Number of cylinders                      #>  3 disp  Displacement (cu.in.)                    #>  4 hp    Gross horsepower                         #>  5 drat  Rear axle ratio                          #>  6 wt    Weight (1000 lbs)                        #>  7 qsec  1/4 mile time                            #>  8 vs    Engine (0 = V-shaped, 1 = straight)      #>  9 am    Transmission (0 = automatic, 1 = manual) #> 10 gear  Number of forward gears                  #> 11 carb  Number of carburetors subset_R7 <- new_generic(\"R7_subset\", c(\"object\", \"row\", \"column\"))  method(subset_R7, list(annotated_df, \"integer\", \"integer\")) <- function(object, row, column, ...) {   data <- object@data[row, column]   rows <- object@rows[row, ]   columns <-  object@columns[column, ]   annotated_df(data, rows, columns) } obj2 <- subset_R7(obj, 1:3, 1:5)  obj2@data #> # A tibble: 3 × 5 #>     mpg   cyl  disp    hp  drat #>   <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9  #> 2  18.7     8  360    175  3.15 #> 3  22.8     4  141.    95  3.92  obj2@rows #> # A tibble: 3 × 2 #>   make   model      #>   <chr>  <chr>      #> 1 Mazda  RX4        #> 2 Hornet Sportabout #> 3 Merc   230  obj2@columns #> # A tibble: 5 × 2 #>   name  description           #>   <chr> <chr>                 #> 1 mpg   Miles/(US) gallon     #> 2 cyl   Number of cylinders   #> 3 disp  Displacement (cu.in.) #> 4 hp    Gross horsepower      #> 5 drat  Rear axle ratio obj2@rows <- obj2@rows[1:2, ] #> Error: <annotated_df> object is invalid: #> - `nrow(<annotated_df>@rows)` must be equal to `nrow(<annotated_df>)`"},{"path":"https://RConsortium.github.io/OOP-WG/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Henrik Bengtsson. Author. Landau. Author. Michael Lawrence. Author. Martin Maechler. Author. Luke Tierney. Author. Gabriela De Queiroz. Author. Hadley Wickham. Author. Jim Hester. Author, maintainer.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bengtsson H, Landau W, Lawrence M, Maechler M, Tierney L, De Queiroz G, Wickham H, Hester J (2022). R7: S3 Extended S4 Features. https://RConsortium.github.io/OOP-WG, https://rconsortium.github.io/OOP-WG.","code":"@Manual{,   title = {R7: S3 Extended with S4 Features},   author = {Henrik Bengtsson and Will Landau and Michael Lawrence and Martin Maechler and Luke Tierney and Gabriela {De Queiroz} and Hadley Wickham and Jim Hester},   year = {2022},   note = {https://RConsortium.github.io/OOP-WG, https://rconsortium.github.io/OOP-WG}, }"},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"object-oriented-programming-working-group","dir":"","previous_headings":"","what":"S3 Extended with S4 Features","title":"S3 Extended with S4 Features","text":"Initial proposal Requirements brainstorming Minutes Code (repository R package) ideas implemented R7 package, hosted repository.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"classes-and-objects","dir":"","previous_headings":"","what":"Classes and objects","title":"S3 Extended with S4 Features","text":"","code":"library(R7)  range <- new_class(\"range\",   constructor = function(start, end) {     new_object(start = start, end = end)   },   validator = function(x) {     if (x@end < x@start) {       \"<range>@end must be greater than or equal to <range>@start\"     }   },   properties = list(     start = \"numeric\",     end = \"numeric\",     new_property(       name = \"length\",       class = \"numeric\",       getter = function(x) x@end - x@start,       setter = function(x, value) {         x@end <- x@start + value         x       }     )   ) )  x <- range(start = 1, end = 10)  x@start #> [1] 1  x@end #> [1] 10  x@length #> [1] 9  x@length <- 5  x@length #> [1] 5  # incorrect properties throws an error x@middle #> Error in prop(object, name): Can't find property <range>@middle  # assigning properties verifies the class matches the class of the value x@end <- \"foo\" #> Error: <range>@end must be of class <integer> or <double>, not <character>  # assigning properties runs the validator x@end <- 0 #> Error: <range> object is invalid: #> - <range>@end must be greater than or equal to <range>@start  # Print methods for both R7_class objects object_class(x) #> <R7_class> #> @ name  :  range #> @ parent: <R7_object> #> @ properties: #>  $ start : <integer> or <double> #>  $ end   : <integer> or <double> #>  $ length: <integer> or <double>  # As well as normal R7_objects x #> <range/R7_object> #> @ start :  num 1 #> @ end   :  num 6 #> @ length:  num 5"},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"generics-and-methods","dir":"","previous_headings":"","what":"Generics and methods","title":"S3 Extended with S4 Features","text":"","code":"text <- new_class(\"text\", parent = \"character\") foo <- new_generic(\"foo\", \"x\") method(foo, text) <- function(x, ...) paste0(\"foo-\", x)  foo(text(\"hi\")) #> [1] \"foo-hi\""},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"multiple-dispatch","dir":"","previous_headings":"","what":"Multiple dispatch","title":"S3 Extended with S4 Features","text":"Multiple dispatch uses table stored methods property generic. table nested set hashed environments based classes methods. e.g. method(foo, c(\"character\", \"numeric\")) method stored foo@methods[[\"character\"]][[\"numeric\"]]. level search iteratively searches along objects class vector.","code":"bar <- new_generic(\"bar\", c(\"x\", \"y\")) method(bar, list(\"character\", \"double\")) <- function(x, y) paste0(\"foo-\", x, \":\", y)  bar(\"hi\", 42) #> [1] \"foo-hi:42\""},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"calling-the-next-method","dir":"","previous_headings":"","what":"Calling the next method","title":"S3 Extended with S4 Features","text":"next_method() used call next method arguments. works looking call stack retrieving R7 methods already called, method search methods excluded. ensures call method twice.","code":"method(bar, list(text, \"double\")) <- function(x, y, ...) {   res <- next_method()(x, y)   paste0(\"2 \", res) }  bar(text(\"hi\"), 42) #> [1] \"2 foo-hi:42\""},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"non-standard-evaluation","dir":"","previous_headings":"","what":"Non-standard evaluation","title":"S3 Extended with S4 Features","text":"method_call() retains promises dispatch arguments basically way UseMethod(), non-standard evaluation works basically S3.","code":"subset2 <- new_generic(\"subset2\", \"x\")  method(subset2, s3_class(\"data.frame\")) <- function(x, subset = NULL, select = NULL, drop = FALSE) {   e <- substitute(subset)   # Unlike S3, R7 creates a frame for the generic, so we need to   # go one extra level up to get to the user's evaluation environment   r <- eval(e, x, parent.frame(2))   r <- r & !is.na(r)   nl <- as.list(seq_along(x))   names(nl) <- names(x)   vars <- eval(substitute(select), nl, parent.frame())   x[r, vars, drop = drop] }  subset2(mtcars, hp > 200, c(wt, qsec)) #>                        wt  qsec #> Duster 360          3.570 15.84 #> Cadillac Fleetwood  5.250 17.98 #> Lincoln Continental 5.424 17.82 #> Chrysler Imperial   5.345 17.42 #> Camaro Z28          3.840 15.41 #> Ford Pantera L      3.170 14.50 #> Maserati Bora       3.570 14.60"},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"external-generics","dir":"","previous_headings":"Non-standard evaluation","what":"External generics","title":"S3 Extended with S4 Features","text":"want define methods R7 generics defined another package can use new_extrenal_generic declare external generic, add R7::external_methods_register() .onLoad function package. external_methods_register() automatically setup -load hooks ‘soft’ dependencies Suggests method added dependency eventually loaded.","code":".onLoad <- function(libname, pkgname) {   R7::external_methods_register() }  foo <- new_external_generic(\"pkg1\", \"foo\") method(foo, \"integer\") <- function(x) paste0(\"foo-\", x)"},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"design-workflow","dir":"","previous_headings":"","what":"Design workflow","title":"S3 Extended with S4 Features","text":"File issue discuss topic build consensus. consensus reached, issue author create pull request summarises discussion appropriate .md file, request review folks participated issue discussion. participants accepted PR, original author merges.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/as_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard class specifications — as_class","title":"Standard class specifications — as_class","text":"used interface R7 R's OO systems, allowing use R7 classes methods base types, informal S3 classes, formal S4 classes.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/as_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard class specifications — as_class","text":"","code":"as_class(x, arg = deparse(substitute(x)))"},{"path":"https://RConsortium.github.io/OOP-WG/reference/as_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard class specifications — as_class","text":"x class specification. One following: R7 class (created new_class()). R7 union (created new_union()). S3 class (created s3_class()). S4 class (created methods::getClass() methods::new()). base type specified either constructor (logical, integer, double etc) name (\"logical\", \"integer\", \"double\" etc). base union type specified name: \"numeric\", \"atomic\", \"vector\". arg Argument name used generating errors.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/as_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard class specifications — as_class","text":"standardised class: either NULL, R7 class, R7 union, s3_class, S4 class.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a R7 method for a generic — method<-","title":"Register a R7 method for a generic — method<-","text":"generic defines interface function. created generic new_generic(), provide implementations specific signatures registering methods method<- goal method<- single function need working R7 generics R7 classes. means well registering methods R7 classes R7 generics, can also register methods R7 classes S3 S4 generics, S3 S4 classes R7 generics. general method registration function: least one generic signature needs R7.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a R7 method for a generic — method<-","text":"","code":"method(generic, signature) <- value"},{"path":"https://RConsortium.github.io/OOP-WG/reference/method-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a R7 method for a generic — method<-","text":"generic generic function, either created new_generic(), new_external_generic(), existing S3 generic. signature method signature. R7 generics use single dispatch, one following: R7 class (created new_class()). R7 union (created new_union()). S3 class (created s3_class()). S4 class (created methods::getClass() methods::new()). base type specified either constructor (logical, integer, double etc) name (\"logical\", \"integer\", \"double\" etc). base union type specified name: \"numeric\", \"atomic\", \"vector\". R7 generics use multiple dispatch, can list types. S3 generics, must R7 class. value function implements generic specification given signature.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a R7 method for a generic — method<-","text":"","code":"# Create a generic bizarro <- new_generic(\"bizarro\", \"x\") # Register some methods method(bizarro, \"numeric\") <- function(x) rev(x) method(bizarro, s3_class(\"data.frame\")) <- function(x) {   x[] <- lapply(x, bizarro)   rev(x) }  # Using a generic calls the methods automatically bizarro(head(mtcars)) #>                   carb gear am vs  qsec    wt drat  hp disp cyl  mpg #> Mazda RX4            1    3  0  1 20.22 3.460 2.76 105  225   6 18.1 #> Mazda RX4 Wag        2    3  0  0 17.02 3.440 3.15 175  360   8 18.7 #> Datsun 710           1    3  0  1 19.44 3.215 3.08 110  258   6 21.4 #> Hornet 4 Drive       1    4  1  1 18.61 2.320 3.85  93  108   4 22.8 #> Hornet Sportabout    4    4  1  0 17.02 2.875 3.90 110  160   6 21.0 #> Valiant              4    4  1  0 16.46 2.620 3.90 110  160   6 21.0"},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a method for an R7 generic — method","title":"Retrieve a method for an R7 generic — method","text":"method() takes generic signature retrieves corresponding method. rarely needed time rely generic, via method_call(), find call method . However, introspection useful want see implementation specific method.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a method for an R7 generic — method","text":"","code":"method(generic, signature)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a method for an R7 generic — method","text":"generic generic function, either created new_generic(), new_external_generic(), existing S3 generic. signature method signature. R7 generics use single dispatch, one following: R7 class (created new_class()). R7 union (created new_union()). S3 class (created s3_class()). S4 class (created methods::getClass() methods::new()). base type specified either constructor (logical, integer, double etc) name (\"logical\", \"integer\", \"double\" etc). base union type specified name: \"numeric\", \"atomic\", \"vector\". R7 generics use multiple dispatch, can list types. S3 generics, must R7 class.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a method for an R7 generic — method","text":"function class <R7_method>.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a method for an R7 generic — method","text":"","code":"# Create a generic and register some methods bizarro <- new_generic(\"bizarro\", \"x\") method(bizarro, \"numeric\") <- function(x) rev(x) method(bizarro, s3_class(\"factor\")) <- function(x) {   levels(x) <- rev(levels(x))   x }  # Printing the generic shows the registered method bizarro #> <R7_generic> function (x, ...)  with 3 methods: #> 1: method(bizarro, \"integer\") #> 2: method(bizarro, \"double\") #> 3: method(bizarro, s3_class(\"factor\"))  # And you can use method() to inspect specific implementations method(bizarro, \"integer\") #> <R7_method> method(bizarro, \"integer\") #> function (x)  #> rev(x) #> <environment: 0x55fdcabfd5a0> method(bizarro, s3_class(\"factor\")) #> <R7_method> method(bizarro, s3_class(\"factor\")) #> function (x)  #> { #>     levels(x) <- rev(levels(x)) #>     x #> } #> <environment: 0x55fdcabfd5a0>"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new R7 class — new_class","title":"Define a new R7 class — new_class","text":"class specifies properties (data) objects possess. class, parent, determines method used object passed generic.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new R7 class — new_class","text":"","code":"new_class(   name,   parent = R7_object,   properties = list(),   constructor = NULL,   validator = function(x) NULL )"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new R7 class — new_class","text":"name name class, string. parent parent class. inherit behaviour R7 class, pass class object. inherit behaviour base type, pass function use construct object, e.g. character, integer. properties list specifying properties (data) every object class possess. property can either named string (specifying class), call new_property(), allowing greater flexibility. constructor constructor function. optional, unless want control properties can set constructor. validator function taking single argument, object validate. job validator determine whether object valid, .e. current property values form allowed combination. types properties always automatically validated job validator verify value individual properties ok (.e. maybe property length 1, always positive), combination values multiple properties ok. called construction whenever property set. validator return NULL object valid. , return character vector element describes single problem. generally helpful report many problems possible. See validate() details examples.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a new R7 class — new_class","text":"object constructor, function can used create objects given class.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a new R7 class — new_class","text":"","code":"# Create an class that represents a range using a numeric start and end range <- new_class(\"range\",   properties = list(     start = \"numeric\",     end = \"numeric\"   ) ) r <- range(start = 10, end = 20) r #> <range/R7_object> #> @ start:  num 10 #> @ end  :  num 20 # get and set properties with @ r@start #> [1] 10 r@end <- 40 r@end #> [1] 40  # R7 automatically ensures that properties are of the declared types: try(range(start = \"hello\", end = 20)) #> Error : <range> object properties are invalid: #> - <range>@start must be of class <integer> or <double>, not <character>  # But we might also want to use a validator to ensure that start and end # are length 1, and that start is < end range <- new_class(\"range\",   properties = list(     start = \"numeric\",     end = \"numeric\"   ),   validator = function(x) {     if (length(x@start) != 1) {       \"@start must be a single number\"     } else if (length(x@end) != 1) {       \"@end must be a single number\"     } else if (x@end < x@start) {       \"@end must be great than or equal to @start\"     }   } ) try(range(start = c(10, 15), end = 20)) #> Error : <range> object is invalid: #> - @start must be a single number try(range(start = 20, end = 10)) #> Error : <range> object is invalid: #> - @end must be great than or equal to @start  r <- range(start = 10, end = 20) try(r@start <- 25) #> Error : <range> object is invalid: #> - @end must be great than or equal to @start"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_external_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generics in suggested packages — new_external_generic","title":"Generics in suggested packages — new_external_generic","text":"easiest way define method generic another package add package Imports import generic NAMESPACE. , however, creates strong dependency package, always desired. example, might want register knitr::knitr_print method customise object printed Rmd, package use anything else knitr. Instead, can add package Suggests use new_external_generic() along external_methods_register() declare \"external\" generic. new_external_generic() defines \"shape\" generic without requiring package available. call external_methods_register() .onLoad() dynamically register methods package loaded.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_external_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generics in suggested packages — new_external_generic","text":"","code":"new_external_generic(package, name, version = NULL)  external_methods_register()"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_external_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generics in suggested packages — new_external_generic","text":"package Package generic defined . name Name generic, string. version optional version package must meet method registered.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new generic — new_generic","title":"Define a new generic — new_generic","text":"generic function uses different implementations (methods) depending class one arguments (signature). Create new generic new_generic() use method<- add methods . body generic always contains method_call(), takes care finding calling appropriate method.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new generic — new_generic","text":"","code":"new_generic(name, dispatch_args = NULL, fun = NULL)  method_call()"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new generic — new_generic","text":"name name generic. object assign . dispatch_args character vector giving names arguments form signature, .e. arguments used method dispatch. dispatch_args omitted, fun supplied, default arguments appear ... fun. dots, default first argument. fun dispatch_args supplied, dispatch_args must appear start fun's formals. fun optional specification generic, must call method_call() dispatch methods. usually generated automatically dispatch_args, may want supply want add additional required arguments, perform standardised computation generic.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":"dispatch-arguments","dir":"Reference","previous_headings":"","what":"Dispatch arguments","title":"Define a new generic — new_generic","text":"arguments used pick method called dispatch arguments. cases, one argument, case generic said use single dispatch. consists one argument, said use multiple dispatch. two restrictions dispatch arguments: must first arguments generic generic uses ..., must occur immediately dispatch arguments.","code":""},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a new generic — new_generic","text":"","code":"# A simple generic with methods for some base types and S3 classes type_of <- new_generic(\"type_of\", dispatch_args = \"x\") method(type_of, \"character\") <- function(x, ...) \"A character vector\" method(type_of, s3_class(\"data.frame\")) <- function(x, ...) \"A data frame\" method(type_of, \"function\") <- function(x, ...) \"A function\"  type_of(mtcars) #> [1] \"A data frame\" type_of(letters) #> [1] \"A character vector\" type_of(mean) #> [1] \"A function\"  # If you want to require methods implement additional arguments, supply # them after ... in the call mean2 <- new_generic(\"mean2\", fun = function(x, ..., na.rm = TRUE) {    method_call() }) method(mean2, \"numeric\") <- function(x, ..., na.rm = TRUE) {   if (na.rm) {     x <- x[!is.na(x)]   }   sum(x) / length(x) } method(mean2, \"character\") <- function(x, ..., na.rm = TRUE) {   stop(\"Not supported\") }"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a new object — new_object","title":"Initialize a new object — new_object","text":"Initialize new object","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a new object — new_object","text":"","code":"new_object(.data = NULL, ...)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new property — new_property","title":"Define a new property — new_property","text":"property defines named component object. Properties typically used store (meta) data object, often limited data specific class. specifying getter /setter, can make property \"dynamic\" computed accessed non-standard behaviour modified.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new property — new_property","text":"","code":"new_property(name, class = NULL, getter = NULL, setter = NULL)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new property — new_property","text":"name Property name, primarily used error messages. class specified, values must one classes (class union). getter optional function used get value. function take object sole argument return value. property class class value validated. setter optional function used set value. function take object new value two parameters return modified object. value automatically checked.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a new property — new_property","text":"","code":"# Simple properties store data inside an object pizza <- new_class(\"pizza\", properties = list(   new_property(\"slices\", \"numeric\") )) my_pizza <- pizza(slices = 6) my_pizza@slices #> [1] 6 my_pizza@slices <- 5 my_pizza@slices #> [1] 5  # Dynamic properties can compute on demand clock <- new_class(\"clock\", properties = list(   new_property(\"now\", getter = function(x) Sys.time()) )) my_clock <- clock() my_clock@now; Sys.sleep(1) #> [1] \"2022-02-14 23:10:59 UTC\" my_clock@now #> [1] \"2022-02-14 23:11:00 UTC\"  # These can be useful if you want to deprecate a property person <- new_class(\"person\", properties = list(   first_name = \"character\",   new_property(      \"firstName\",      getter = function(x) {        warning(\"@firstName is deprecated; please use @first_name instead\")        x@first_name      },      setter = function(x, value) {        warning(\"@firstName is deprecated; please use @first_name instead\")        x@first_name <- value      }    ) )) hadley <- person(first_name = \"Hadley\") hadley@firstName #> Warning: @firstName is deprecated; please use @first_name instead #> [1] \"Hadley\" hadley@first_name #> [1] \"Hadley\""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a class union — new_union","title":"Define a class union — new_union","text":"class union represents list possible classes. used properties allow property one set classes, method dispatch convenience defining method multiple classes.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a class union — new_union","text":"","code":"new_union(...)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a class union — new_union","text":"... classes include union, either looked named passing R7_class objects directly.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/next_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the next applicable method after the current one — next_method","title":"Retrieve the next applicable method after the current one — next_method","text":"Retrieve next applicable method current one","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/next_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the next applicable method after the current one — next_method","text":"","code":"next_method()"},{"path":"https://RConsortium.github.io/OOP-WG/reference/object_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the R7 class of an object — object_class","title":"Retrieve the R7 class of an object — object_class","text":"Retrieve R7 class object","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/object_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the R7 class of an object — object_class","text":"","code":"object_class(object)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/object_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the R7 class of an object — object_class","text":"object R7 object","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/set a property — prop","title":"Get/set a property — prop","text":"prop(x, \"name\") / prop@name get value property, erroring property exist. prop(x, \"name\") <- value / prop@name <- value set value property.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/set a property — prop","text":"","code":"prop(object, name)  prop(object, name, check = TRUE) <- value  object@name"},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/set a property — prop","text":"object object R7 class name name parameter character. Partial matching performed. check TRUE, check value correct type run validate() object returning. value new value property. object automatically checked validity replacement done.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/set a property — prop","text":"","code":"horse <- new_class(\"horse\", properties = list(   name = \"character\",   colour = \"character\",   height = \"numeric\" )) lexington <- horse(colour = \"bay\", height = 15, name = \"Lex\") lexington@colour #> [1] \"bay\" prop(lexington, \"colour\") #> [1] \"bay\"  lexington@height <- 14 prop(lexington, \"height\") <- 15"},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Property introspection — prop_names","title":"Property introspection — prop_names","text":"prop_names(x) returns names properties prop_exists(x, \"prop\") returns TRUE iif x property prop.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Property introspection — prop_names","text":"","code":"prop_names(object)  prop_exists(object, name)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Property introspection — prop_names","text":"object object R7 class name name parameter character. Partial matching performed.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/props.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/set multiple properties — props","title":"Get/set multiple properties — props","text":"props(x) returns properties. props(x) <- list(name1 = val1, name2 = val2) sets multiple properties.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/props.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/set multiple properties — props","text":"","code":"props(object)  props(object) <- value"},{"path":"https://RConsortium.github.io/OOP-WG/reference/props.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/set multiple properties — props","text":"object object R7 class value named list values. object checked validity replacements performed.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/props.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/set multiple properties — props","text":"","code":"horse <- new_class(\"horse\", properties = list(   name = \"character\",   colour = \"character\",   height = \"numeric\" )) lexington <- horse(colour = \"bay\", height = 15, name = \"Lex\")  props(lexington) #> $name #> [1] \"Lex\" #>  #> $colour #> [1] \"bay\" #>  #> $height #> [1] 15 #>  props(lexington) <- list(height = 14, name = \"Lexigonton\") lexington #> <horse/R7_object> #> @ name  :  chr \"Lexigonton\" #> @ colour:  chr \"bay\" #> @ height:  num 14"},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/set underlying ","title":"Get/set underlying ","text":"R7 class inherits existing base type, can useful work underlying object, .e. R7 object stripped class properties.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/set underlying ","text":"","code":"r7_data(object)  r7_data(object, check = TRUE) <- value"},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/set underlying ","text":"object object R7 class check TRUE, check value correct type run validate() object returning. value Object used replace underlying data.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/set underlying ","text":"","code":"text <- new_class(\"text\", parent = \"character\") y <- text(c(foo = \"bar\")) str(r7_data(y)) #> <R7_object/character> chr \"bar\""},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Base R7 class — R7_object","title":"Base R7 class — R7_object","text":"Base R7 class","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base R7 class — R7_object","text":"","code":"R7_object()"},{"path":"https://RConsortium.github.io/OOP-WG/reference/s3_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare an S3 class — s3_class","title":"Declare an S3 class — s3_class","text":"use S3 class R7, must explicitly declare using s3_class() S3 lacks formal class definition.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/s3_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare an S3 class — s3_class","text":"","code":"s3_class(class, constructor = NULL, validator = NULL)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/s3_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare an S3 class — s3_class","text":"class Character vector S3 classes constructor optional constructor can used create objects specified class. needed wish R7 class inherit S3 class. must specified way R7 constructor: first argument .data (base type whose attributes modified). validator optional validator used validate() check R7 object adheres constraints S3 class. validator single argument function takes object validate returns NULL object valid. object invalid, returns character vector problems.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/s3_class.html","id":"method-dispatch-properties-and-unions","dir":"Reference","previous_headings":"","what":"Method dispatch, properties, and unions","title":"Declare an S3 class — s3_class","text":"three ways using S3 R7 require S3 class vector: Registering S3 method R7 generic. Restricting R7 property S3 class. Using S3 class R7 union. easy, can usually include s3_class() call inline:","code":"method(my_generic, s3_class(\"factor\")) <- function(x) \"A factor\" new_class(\"my_class\", properties = list(types = s3_class(\"factor\"))) new_union(\"character\", s3_class(\"factor\"))"},{"path":"https://RConsortium.github.io/OOP-WG/reference/s3_class.html","id":"extending-an-s-class","dir":"Reference","previous_headings":"","what":"Extending an S3 class","title":"Declare an S3 class — s3_class","text":"Creating R7 class extends S3 class requires work. also need provide constructor S3 class follows R7 conventions. means first argument constructor .data, followed one argument attribute used class. can awkward base S3 classes usually heavily wrapped user convenience low level constructor available. example, factor class integer vector character vector levels, base R function takes integer vector values character vector levels, verifies consistent, creates factor object. may optionally want also provide validator function ensure validate() confirms validity R7 classes build class. Unlike R7 validator, responsible validating types attributes. following code shows might wrap base Date class. Date numeric vector class Date can constructed .Date().","code":"S3_Date <- s3_class(\"Date\",   function(.data) {     .Date(.data)   },   function(object) {     if (!is.numeric(object)) {       \"Underlying data must be numeric\"     }   } )"},{"path":"https://RConsortium.github.io/OOP-WG/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an R7 object — validate","title":"Validate an R7 object — validate","text":"validate() ensures R7 object valid calling validator provided new_class(). done automatically constructing new objects modifying properties. valid_eventually() disables validation, modifies object, revalidates. useful sequence operations otherwise lead object temporarily invalid, repeated property modification causes performance bottleneck validator relatively expensive. valid_implicitly() validate object end. used rarely, performance critical code certain sequence operations produce invalid object.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an R7 object — validate","text":"","code":"validate(object, properties = TRUE)  valid_eventually(object, fun)  valid_implicitly(object, fun)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an R7 object — validate","text":"object R7 object properties TRUE, default, checks property types executing validator. fun function call object validation.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate an R7 object — validate","text":"","code":"# A range class might validate that the start is less than the end Range <- new_class(\"Range\",   properties = list(start = \"double\", end = \"double\"),   validator = function(object) {     if (object@start >= object@end) \"start must be smaller than end\"   } ) # You can't construct an invalid object: try(Range(1, 1)) #> Error : <Range> object is invalid: #> - start must be smaller than end  # And you can't create an invalid object with @<- r <- Range(1, 2) try(r@end <- 1) #> Error : <Range> object is invalid: #> - start must be smaller than end  # But what if you want to move a range to the right? rightwards <- function(r, x) {   r@start <- r@start + x   r@end <- r@end + x   r } # This function doesn't work because it creates a temporarily invalid state try(rightwards(r, 10)) #> Error : <Range> object is invalid: #> - start must be smaller than end  # This is the perfect use case for valid_eventually(): rightwards <- function(r, x) {   valid_eventually(r, function(object) {     object@start <- object@start + x     object@end <- object@end + x     object   }) } rightwards(r, 10) #> <Range/R7_object> #> @ start:  num 11 #> @ end  :  num 12  # Alternatively, you can set multiple properties at once using props<-, # which validates once at the end rightwards <- function(r, x) {   props(r) <- list(start = r@start + x, end = r@end + x)   r } rightwards(r, 20) #> <Range/R7_object> #> @ start:  num 21 #> @ end  :  num 22"},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/news/index.html","id":"jan-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Jan 2020","title":"R7 0.0.0.9000","text":"New props<- setting multiple properties simultaneously validating afterwards (#149). Validation now happens recursively, validates types validating object (#149) Classes (base types, S3, S4, R7) handled consistently wherever used. Strings now refer base types. New explicit s3_class() referring S3 classes (#134). S4 unions converted R7 unions (#150). Base numeric, atomic, vector “types” now represented class unions (#147). Different evaluation mechanism method dispatch, greater restrictions dispatch args (#141) x@.data -> r7_data(); probably replaced casting. generic, signature -> dispatch_args. Polished str() print() methods new_class() properties 3rd argument (instead constructor).","code":""}]
