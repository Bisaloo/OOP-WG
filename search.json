[{"path":"https://RConsortium.github.io/OOP-WG/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 R7 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/R7.html","id":"classes-and-objects","dir":"Articles","previous_headings":"","what":"Classes and objects","title":"R7","text":"","code":"range <- new_class(\"range\",   validator = function(self) {     if (self@end < self@start) {       \"<range>@end must be greater than or equal to <range>@start\"     }   },   properties = list(     start = \"numeric\",     end = \"numeric\",     new_property(       name = \"length\",       class = \"numeric\",       getter = function(self) self@end - self@start,       setter = function(self, value) {         self@end <- self@start + value         self       }     )   ) )  x <- range(start = 1, end = 10)  x@start #> [1] 1  x@end #> [1] 10  x@length #> [1] 9  x@length <- 5  x@length #> [1] 5 # incorrect properties throws an error x@middle #> Error in prop(object, name): Can't find property <range>@middle  # assigning properties verifies the class matches the class of the value x@end <- \"foo\" #> Error: <range>@end must be <integer> or <double>, not <character>  # assigning properties runs the validator x@end <- 0 #> Error: <range> object is invalid: #> - <range>@end must be greater than or equal to <range>@start # Print methods for both R7_class objects range #> <R7_class> #> @ name  :  range #> @ parent: <R7_object> #> @ properties: #>  $ start : <integer> or <double> #>  $ end   : <integer> or <double> #>  $ length: <integer> or <double>  # As well as normal R7_objects x #> <range> #> @ start :  num 1 #> @ end   :  num 6 #> @ length:  num 5"},{"path":"https://RConsortium.github.io/OOP-WG/articles/R7.html","id":"generics-and-methods","dir":"Articles","previous_headings":"","what":"Generics and methods","title":"R7","text":"","code":"text <- new_class(\"text\", parent = \"character\") foo <- new_generic(\"foo\", \"x\") method(foo, text) <- function(x, ...) paste0(\"foo-\", x)  foo(text(\"hi\")) #> [1] \"foo-hi\""},{"path":"https://RConsortium.github.io/OOP-WG/articles/R7.html","id":"multiple-dispatch","dir":"Articles","previous_headings":"","what":"Multiple dispatch","title":"R7","text":"Multiple dispatch uses table stored methods property generic. table nested set hashed environments based classes methods. e.g. method(foo, c(\"character\", \"numeric\")) method stored foo@methods[[\"character\"]][[\"numeric\"]]. level search iteratively searches along objects class vector.","code":"bar <- new_generic(\"bar\", c(\"x\", \"y\")) method(bar, list(\"character\", \"double\")) <- function(x, y) paste0(\"foo-\", x, \":\", y)  bar(\"hi\", 42) #> [1] \"foo-hi:42\""},{"path":"https://RConsortium.github.io/OOP-WG/articles/R7.html","id":"calling-the-next-method","dir":"Articles","previous_headings":"","what":"Calling the next method","title":"R7","text":"next_method() used call next method arguments. works looking call stack retrieving R7 methods already called, method search methods excluded. ensures call method twice.","code":"method(bar, list(text, \"double\")) <- function(x, y, ...) {   res <- next_method()(x, y)   paste0(\"2 \", res) }  bar(text(\"hi\"), 42) #> [1] \"2 foo-hi:42\""},{"path":"https://RConsortium.github.io/OOP-WG/articles/R7.html","id":"non-standard-evaluation","dir":"Articles","previous_headings":"","what":"Non-standard evaluation","title":"R7","text":"method_call() retains promises dispatch arguments basically way UseMethod(), non-standard evaluation works basically S3.","code":"subset2 <- new_generic(\"subset2\", \"x\")  method(subset2, new_S3_class(\"data.frame\")) <- function(x, subset = NULL, select = NULL, drop = FALSE) {   e <- substitute(subset)   # Unlike S3, R7 creates a frame for the generic, so we need to   # go one extra level up to get to the user's evaluation environment   r <- eval(e, x, parent.frame(2))   r <- r & !is.na(r)   nl <- as.list(seq_along(x))   names(nl) <- names(x)   vars <- eval(substitute(select), nl, parent.frame())   x[r, vars, drop = drop] }  subset2(mtcars, hp > 200, c(wt, qsec)) #>                        wt  qsec #> Duster 360          3.570 15.84 #> Cadillac Fleetwood  5.250 17.98 #> Lincoln Continental 5.424 17.82 #> Chrysler Imperial   5.345 17.42 #> Camaro Z28          3.840 15.41 #> Ford Pantera L      3.170 14.50 #> Maserati Bora       3.570 14.60"},{"path":"https://RConsortium.github.io/OOP-WG/articles/R7.html","id":"external-generics","dir":"Articles","previous_headings":"Non-standard evaluation","what":"External generics","title":"R7","text":"want define methods R7 generics defined another package can use new_extrenal_generic declare external generic, add R7::external_methods_register() .onLoad function package. external_methods_register() automatically setup -load hooks ‘soft’ dependencies Suggests method added dependency eventually loaded.","code":".onLoad <- function(libname, pkgname) {   R7::external_methods_register() }  foo <- new_external_generic(\"pkg1\", \"foo\") method(foo, \"integer\") <- function(x) paste0(\"foo-\", x)"},{"path":"https://RConsortium.github.io/OOP-WG/articles/case_studies.html","id":"person-class","dir":"Articles","previous_headings":"","what":"Person class","title":"Case Studies","text":"case study demonstrates creating basic classes accessors functions, inheritance composition. can modify objects creation assigning property. Unlike S4 validity automatically checked assignment, just object creation. Classes can inherit parent class parent contain properties complex classes.","code":"Person <- new_class(\"Person\",   properties = list(     name = \"character\",     new_property(       name = \"birthdate\",       class = new_S3_class(\"Date\"),       setter = function(self, value) {         self@birthdate <- as.Date(value)         self       },       default = as.Date(NA)     ),     new_property(       name = \"age\",       class = \"numeric\",       getter = function(self) {         # This is not correct because of leap years,         # see https://stackoverflow.com/questions/3611314/calculate-ages-in-r/25450756#25450756 for a correct implementation.         as.double(Sys.Date() - self@birthdate) %/% 365       }     )   ),   validator = function(self) {     if (length(self@name) != length(self@birthdate)) {       \"@name and @birthdate must be the same length\"     }   } )  jane <- Person(name = \"Jane Doe\")  jane@name #> [1] \"Jane Doe\"  jane@age #> [1] NA jane@birthdate <- \"1982-03-04\"  jane@age #> [1] 40  jane@birthdate <- as.Date(c(\"2001-01-01\", \"2002-02-02\")) #> Error: <Person> object is invalid: #> - @name and @birthdate must be the same length Employee <- new_class(\"Employee\",   parent = Person,   properties = list(boss = Person) )  x <- Employee(name = \"John Smith\", birthdate = \"1992-10-11\", boss = jane)  x@name #> [1] \"John Smith\"  x@age #> [1] 29  x@boss #> <Person> #> @ name     :  chr \"Jane Doe\" #> @ birthdate:  Date[1:1], format: \"1982-03-04\" #> @ age      :  num 40"},{"path":"https://RConsortium.github.io/OOP-WG/articles/case_studies.html","id":"annotated-data-frame","dir":"Articles","previous_headings":"","what":"Annotated Data Frame","title":"Case Studies","text":"case study implements basic imitation SummarizedExperiment class used widely Bioconductor community. annotated_df class normal R data.frame two additional properties - rows holds data.frame containing data rows data. - columns holds data.frame containing data columns data. validator function automatically ensures consistency size data size corresponding rows columns. particular number rows rows property matches number rows data, number rows columns property matches number columns data. definition class. print method tells us R7 class gives us types properties class. instantiate instance annotated_df first need get data put . example use mtcars dataset. requires manipulation get rows columns data right formats. can create instance using constructor function. next define R7_subset generic function, R7 method function, taking integer arguments rows columns. subsets individual components appropriately returns new annotated_df object . subset using function can see consistency retained data components. validation function automatically run try change property, ensures class integrity.","code":"annotated_df <- new_class(\"annotated_df\",   properties = list(     data = new_S3_class(\"tbl_df\"),     rows = new_S3_class(\"tbl_df\"),     columns = new_S3_class(\"tbl_df\")   ),   validator = function(self) {     if (nrow(self@data) != nrow(self@rows)) {       \"`nrow(<annotated_df>@rows)` must be equal to `nrow(<annotated_df>)`\"     } else if (ncol(self@data) != nrow(self@columns)) {       \"`nrow(<annotated_df>@columns)` must be equal to `ncol(<annotated_df>)`\"     }   } ) annotated_df #> <R7_class> #> @ name  :  annotated_df #> @ parent: <R7_object> #> @ properties: #>  $ data   : S3<tbl_df> #>  $ rows   : S3<tbl_df> #>  $ columns: S3<tbl_df> mt <- mtcars[seq(1, 32, 4), ]  splits <- strsplit(rownames(mt), \" \")  mt <- tibble::as_tibble(mt)  vcapply <- function(VALUE, FUN, ...) vapply(VALUE, FUN, character(1), ...)  row_info <- tibble::tibble(   make = vcapply(splits, head, 1),   model = vcapply(splits, function(x) paste0(tail(x, -1), collapse = \" \")) )  col_desc <- c(   \"mpg\" = \"Miles/(US) gallon\",   \"cyl\" = \"Number of cylinders\",   \"disp\" = \"Displacement (cu.in.)\",   \"hp\" = \"Gross horsepower\",   \"drat\" = \"Rear axle ratio\",   \"wt\" = \"Weight (1000 lbs)\",   \"qsec\" = \"1/4 mile time\",   \"vs\" = \"Engine (0 = V-shaped, 1 = straight)\",   \"am\" = \"Transmission (0 = automatic, 1 = manual)\",   \"gear\" = \"Number of forward gears\",   \"carb\" = \"Number of carburetors\" )  col_info <- tibble::tibble(name = names(col_desc), description = col_desc) obj <- annotated_df(mt, row_info, col_info) obj@data #> # A tibble: 8 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 2  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #> 3  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 4  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 #> 5  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 #> 6  21.5     4  120.    97  3.7   2.46  20.0     1     0     3     1 #> 7  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2 #> 8  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4  obj@rows #> # A tibble: 8 × 2 #>   make     model      #>   <chr>    <chr>      #> 1 Mazda    RX4        #> 2 Hornet   Sportabout #> 3 Merc     230        #> 4 Merc     450SL      #> 5 Chrysler Imperial   #> 6 Toyota   Corona     #> 7 Pontiac  Firebird   #> 8 Ford     Pantera L  obj@columns #> # A tibble: 11 × 2 #>    name  description                              #>    <chr> <chr>                                    #>  1 mpg   Miles/(US) gallon                        #>  2 cyl   Number of cylinders                      #>  3 disp  Displacement (cu.in.)                    #>  4 hp    Gross horsepower                         #>  5 drat  Rear axle ratio                          #>  6 wt    Weight (1000 lbs)                        #>  7 qsec  1/4 mile time                            #>  8 vs    Engine (0 = V-shaped, 1 = straight)      #>  9 am    Transmission (0 = automatic, 1 = manual) #> 10 gear  Number of forward gears                  #> 11 carb  Number of carburetors subset_R7 <- new_generic(\"R7_subset\", c(\"object\", \"row\", \"column\"))  method(subset_R7, list(annotated_df, \"integer\", \"integer\")) <- function(object, row, column, ...) {   data <- object@data[row, column]   rows <- object@rows[row, ]   columns <-  object@columns[column, ]   annotated_df(data, rows, columns) } obj2 <- subset_R7(obj, 1:3, 1:5)  obj2@data #> # A tibble: 3 × 5 #>     mpg   cyl  disp    hp  drat #>   <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9  #> 2  18.7     8  360    175  3.15 #> 3  22.8     4  141.    95  3.92  obj2@rows #> # A tibble: 3 × 2 #>   make   model      #>   <chr>  <chr>      #> 1 Mazda  RX4        #> 2 Hornet Sportabout #> 3 Merc   230  obj2@columns #> # A tibble: 5 × 2 #>   name  description           #>   <chr> <chr>                 #> 1 mpg   Miles/(US) gallon     #> 2 cyl   Number of cylinders   #> 3 disp  Displacement (cu.in.) #> 4 hp    Gross horsepower      #> 5 drat  Rear axle ratio obj2@rows <- obj2@rows[1:2, ] #> Error: <annotated_df> object is invalid: #> - `nrow(<annotated_df>@rows)` must be equal to `nrow(<annotated_df>)`"},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2020-05-18.html","id":"process-ml","dir":"Articles > Minutes","previous_headings":"Discussion","what":"Process (ML)","title":"Minutes 2020-05-18","text":"Active discussion GitHub issues: https://github.com/RConsortium/OOP-WG Need little process finalise discussion. Proposal: original author reads discussion, summarises, creates pull request closes issue. participants discussion added reviewers. issues resolved, can start move forward next steps syntax, implementation, …","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2020-05-18.html","id":"do-you-have-a-sense-for-what-the-system-might-look-like-hb","dir":"Articles > Minutes","previous_headings":"Discussion","what":"Do you have a sense for what the system might look like? (HB)","title":"Minutes 2020-05-18","text":"Unfortunately don’t lot time, reading happy review. much implementation head? ML: Quite bit; wanted make sure step back make sure requirements. yes, vision head. HW: clear idea head; mostly building top S3","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2020-05-18.html","id":"would-it-look-more-like-s3-s4-or-something-completely-new-hb","dir":"Articles > Minutes","previous_headings":"Discussion","what":"Would it look more like S3, S4, or something completely new? (HB)","title":"Minutes 2020-05-18","text":"ML: one main restrictions build existing system HW: one advantages NAMESPACE ML: base uses LT: want able define new methods “[”, means maximally compatible base.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2020-05-18.html","id":"double-dispatch-hwlt","dir":"Articles > Minutes","previous_headings":"Discussion","what":"Double dispatch (HW/LT)","title":"Minutes 2020-05-18","text":"LT: double dispatch S3. S4 overly ambitious v hard maintain. CLOS written v. smart people still got things wrong. HW: may need carve double dispatch v2. HO: multiple inheritance falling favour (diamond inheritance problem etc). use interface based approach instead?","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2020-05-18.html","id":"generic-interfaces-lt","dir":"Articles > Minutes","previous_headings":"Discussion","what":"Generic “interfaces” (LT)","title":"Minutes 2020-05-18","text":"LT: need consider just generics , related. Related contracts eiffel, concepts C++20, ...","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2020-05-18.html","id":"message-passing-oop-ho","dir":"Articles > Minutes","previous_headings":"Discussion","what":"Message passing OOP (HO)","title":"Minutes 2020-05-18","text":"HO: considering ? (.e. R6 ref classes) ML: currently scope","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2020-05-18.html","id":"what-are-the-implications-for-compiling-hb","dir":"Articles > Minutes","previous_headings":"Discussion","what":"What are the implications for compiling? (HB)","title":"Minutes 2020-05-18","text":"LT: compiling currently entirely within functions; one day might nice compile across functions/methods etc. Always thinking compilation might work. generally features hard compile hard users understand.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2020-05-18.html","id":"action-items","dir":"Articles > Minutes","previous_headings":"","what":"Action items","title":"Minutes 2020-05-18","text":"Continue discussion issues Start turning issues PRs Feel free fix minor issues","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2021-02-12.html","id":"process-check-in","dir":"Articles > Minutes","previous_headings":"","what":"Process check-in","title":"Minutes 2021-02-12","text":"Minor stuff ’m just . Bigger changes get Davis review. semantic changes without discussion issues","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2021-02-12.html","id":"changes","dir":"Articles > Minutes","previous_headings":"","what":"Changes","title":"Minutes 2021-02-12","text":"as_class() centralises handling classes (base types, S3, S4, R7) Strings now refer base types (previously used S3 + R7 class parent frame) new_class( parent = \"function\") provide wrappers base unions consider get rid string representation altogether? (e.g. base_atomic) https://github.com/RConsortium/OOP-WG/pull/148 makes possible R7 class extend S3 class export S3 class definitions common base S3 classes? provide base_factor etc. S4 unions converted R7 unions Clarify difference registration dispatch. flow refactoring C code near future. Dispatch base/S3/S4/R7 class R7 generic. Registration base/S3/S4/R7 class R7 generic R7 class S3/S4 generic. combinations now tested. Thorough refactoring method registration generic, signature -> dispatch_args. Simplified evaluation restricted dispatch args (probably much, relax needed) provide default dispatch argument name? x Validate types, call validator() Also call validator() super classes New props<- multi-assignment. validates end. General QoL improvements print() str() methods","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2021-02-12.html","id":"next-up","dir":"Articles > Minutes","previous_headings":"","what":"Next up","title":"Minutes 2021-02-12","text":"Refactor method dispatch Defaults properties, get point constructor() without argument usually works Dispatch Missing/Coercion (cast()) Eliminate next_method() (up_cast()) Documentation","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/minutes/2021-02-12.html","id":"discussion","dir":"Articles > Minutes","previous_headings":"","what":"Discussion","title":"Minutes 2021-02-12","text":"Still need real world application Hadley submit proposals useR + rstudio::conf; determine speakers topics closer time Next time meet, discuss ways advertise Ok rename default branch master main? ~5 minutes work unlikely cause problems. Ok eliminate prop_safely()? https://github.com/RConsortium/OOP-WG/issues/156 show S3/S4 _arg looks good Coercion: https://github.com/RConsortium/OOP-WG/issues/136","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"objects","dir":"Articles > Spec","previous_headings":"","what":"Objects","title":"Design specification","text":"define R7 object R object : class object attribute, reference class object, retrieved classObject(). S3 compatibility, class attribute, character vector class names. Additional attributes storing properties defined class, accessible @/prop().","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"classes","dir":"Articles > Spec","previous_headings":"","what":"Classes","title":"Design specification","text":"R7 classes first class objects (Req2) following components: Name, human-meaningful descriptor class. used default print method error messages; identify class. Parent, class object parent class. implies single inheritance (Req6). constructor, user-facing function used create new objects class. always ends call newObject() initialize class. function (wrapped appropriately) represents class. validator, function takes object returns NULL object valid, otherwise character vector error messages (like methods package). Properties, list property objects (see ) define data objects can possess. Classes constructed supplying components call newClass(). newClass() returns class object can called construct object class. example:","code":"newClass(   name,    parent = Object,    constructor = function(...) newObject(...),    validator = function(x) NULL,   properties = list() ) Range <- newClass(\"Range\",    Vector,    constructor = function(start, end) {     stopifnot(is.numeric(start), is.numeric(end), end >= start)     newObject(start = start, end = end)   },   validator = function(x) {     if (x@end < x@start) {       \"end must be greater than or equal to start\"     }   },    properties = c(start = \"numeric\", end = \"numeric\") )  Range(start = 1, end = 10)"},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"initialization","dir":"Articles > Spec","previous_headings":"Classes","what":"Initialization","title":"Design specification","text":"constructor uses newObject() initialize new object. : Inspects enclosing scope find “current” class. Creates prototype, either calling parent constructor creating base type adding class classObject attributes . Validates properties adds prototype. Validates complete object. Steps 2 3 similar calling structure(), except property values initialized validated property system.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"shortcuts","dir":"Articles > Spec","previous_headings":"Classes","what":"Shortcuts","title":"Design specification","text":"convention, argument takes class object can instead take name class object string. name used find class object calling frame. Similarly, instead providing list property objects, can instead provide named character vector. example, c(name = \"character\", age = \"integer\") shorthand list(newProperty(\"name\", \"character\"), newProperty(\"age\", \"integer\")).","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"validation","dir":"Articles > Spec","previous_headings":"Classes","what":"Validation","title":"Design specification","text":"Objects validated initialization every time property modified. temporarily opt-validation (e.g. order transition temporarily invalid state), R7 provides eventuallyValid(): example, wanted move Range object right, write: ensures validation trigger x@start + y greater x@end. R7 also provides implicitlyValid() expert use. similar eventuallyValid() check validity end. can used performance critical code can ascertain sequence operations can never make valid object invalid. (can quite hard: example, move_right() example , might think x@start < x@end true beginning, x@start + y < x@end + y still true end, don’t need re-validate object. ’s necessarily true: x@start == 1, x@end == 2, abs(y) > 2e16 x@start + y == x@end + y!)","code":"eventuallyValid <- function(object, fun) {   object$internal_validation_flag <- FALSE   out <- fun(object)   out$internal_validation_flag <- TRUE   validate(out) } move_right <- function(x, y) {   eventuallyValid(x, function(x) {     x@start <- x@start + y     x@end <- x@end + y     x   }) }"},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"unions","dir":"Articles > Spec","previous_headings":"Classes","what":"Unions","title":"Design specification","text":"class union represents list possible classes. used properties allow property one set classes, method dispatch convenience defining method multiple classes.","code":"ClassUnion <- defineClass(\"ClassUnion\",    properties = list(classes = \"list\"),   validator = function(x) {     # Checks that all elements of classes are Class object   },   constructor = function(...) {     classes <- list(...)     # look up Class object from any class vectors     newObject(classes = classes)   } )  ClassUnion(\"character\", \"NULL\") ClassUnion(Range, NULL)"},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"properties","dir":"Articles > Spec","previous_headings":"","what":"Properties","title":"Design specification","text":"Properties store data needed object. Properties object can accessed using @/@<- prop()/prop<-. Setting properties object always triggers validation. Properties less encapsulated equivalents languages R users expect transparency want get actual data inside object directly manipulate get work done. Properties support typical usage still providing ability encapsulate data hide implementation details. Every property definition : name, used label output humans. optional class (class union). optional accessor function overrides getting setting, much like active binding (default, value stored attribute, like S3/S4). Property objects created newProperty(): Compared S3 attributes, properties considerably stricter: class defines names types properties. Compared S4 slots, properties enable object change internals without breaking existing usage can provides custom accessor redirects new representation. built-support emitting deprecation messages. tempting support public vs. private scoping properties, obvious , code privileged another. clear whether package define boundary, packages sometimes define methods classes defined packages want take advantage internal representations. believe encapsulation afforded properties good compromise.","code":"newProperty(   name,    class = NULL,    accessor = NULL )"},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"generics","dir":"Articles > Spec","previous_headings":"","what":"Generics","title":"Design specification","text":"generic separates function interface implementation: generic defines interface, methods provide implementation. introspection purposes, knows name names arguments signature (arguments considered dispatch). Calling newGeneric() defines new generic. signature: signature default first argument, .e. formals(FUN)[1]. body FUN resemble S3 S4 generics. might just call UseMethod(). convention, argument takes generic function, can instead take name generic function supplied string. name used find class object calling frame.","code":"newGeneric(name, FUN, signature)"},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"creation","dir":"Articles > Spec","previous_headings":"Methods","what":"Creation","title":"Design specification","text":"Methods defined calling method<-(generic, signature, method): generic generic function. signature single class object, class union, list class objects/unions, character vector. method compatible function, .e. arguments ... names order; generic doesn’t ... arguments must . Documentation discuss risks defining method don’t either generic class. method<- designed work run-time (just package build-time) methods can defined packages define classes generics loaded package defines methods. typically occurs providing methods generics classes suggested packages.","code":"method(generic, signature) <- function(x, ...) {} whenLoaded(\"pkg\", {   method(mean, pkg::A) <- function() 10   method(sum, pkg::A) <- function() 5 })"},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"dispatch","dir":"Articles > Spec","previous_headings":"Methods","what":"Dispatch","title":"Design specification","text":"Dispatch nested, meaning multiple arguments generic signature, dispatch first argument, second. Nested dispatch likely easier predict understand compared treating arguments equal precedence. Nested dispatch also easier implement efficiently, classes effectively inherit methods, implement inheritance using environments. example, plot() generic dispatching x implemented like : publish() publishes object x destination y, dispatching arguments, implemented : method dispatch nested, presumably equivalent something like: Alternatively, generics just call UseMethod(), gain support nested dispatch.","code":"plot <- function(x) {   method(plot, classObject(x))(x) } publish <- function(x, y, ...) {   sig <- list(classObject(x), classObject(y))   method(publish, sig)(x, y, ...) } publish <- function(x, y, ...) {   publish_x <- method(publish, classObject(x))   publish_xy <- method(publish_x, classObject(y))    publish_xy(x, y, ...) }"},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"s3","dir":"Articles > Spec","previous_headings":"Compatibility","what":"S3","title":"Design specification","text":"Since class attribute semantics S3, S3 dispatch fully compatible. new generics also able handle legacy S3 objects.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"s4","dir":"Articles > Spec","previous_headings":"Compatibility","what":"S4","title":"Design specification","text":"principle, modify methods package S4 generics can operate new class definitions. Since new generics fallback S3 dispatch, support S4 objects just S3 generics support now.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/design.html","id":"documentation","dir":"Articles > Spec","previous_headings":"","what":"Documentation","title":"Design specification","text":"primary challenge availability methods classes depends packages installed, need generate index pages list methods generic methods particular class signature. documentation blurbs lazily scraped runtime build index, similar help search index created now. generate help pages index. index installed methods provide additional benefits, including introspection. generic prompt user load package fails find applicable method, installed, unloaded method available. casd arise method defined outside packages define class generic.","code":""},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s3","dir":"Articles > Spec","previous_headings":"Single dispatch","what":"S3","title":"Dispatch","text":"basic rules S3 dispatch simple. object class attribute c(\"\", \"b\", \"c\") generic f() looks methods following order: f.() f.b() f.c() f.default() method found, errors.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"r7","dir":"Articles > Spec","previous_headings":"Single dispatch","what":"R7","title":"Dispatch","text":"R7 behave S3.","code":""},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s3-1","dir":"Articles > Spec","previous_headings":"Method lookup","what":"S3","title":"Dispatch","text":"precisely UseMethod() look methods? R 4.0.0, looks following three places: method table special environment .__S3MethodsTable__. found environment generic defined. chain environments starting parent.frame() call generic, ending global environment. base environment (..e. skips search).","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"r7-1","dir":"Articles > Spec","previous_headings":"Method lookup","what":"R7","title":"Dispatch","text":"R7 methods defined using assignment: Behind scenes, acts directly upon method table, method lookup R7 generics never needs look parent frame. method<- likely start shim around .S3method() may want consider separate .__R7MethodsTable__.. use new data structure resolves generic/class ambiguity (e.g. .equal.data.frame()). Methods R7 classes defined S3 generics still use S3 method table. consider attaching method table generic, instead containing environment. Method lookup cached performance, performed per class. Cached methods marked special attribute flushed whenever new method generic added.","code":"method(\"mean\", \"numeric\") <- function(x) sum(x) / length(x)"},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s3-2","dir":"Articles > Spec","previous_headings":"Method call frame","what":"S3","title":"Dispatch","text":"method found, must called. UseMethod() work like regular function call instead: Changes arguments ignored. Method can access objects created generic. parent frame method call parent frame generic. properties summarised following example:","code":"foo <- function(x, y)  {   y <- 2   z <- 2   UseMethod(\"foo\") } foo.numeric <- function(x, y) {   print(parent.frame())   c(x = x, y = y, z = z) } foo(1, 1) #> <environment: R_GlobalEnv> #> x y z  #> 1 1 2"},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"r7-2","dir":"Articles > Spec","previous_headings":"Method call frame","what":"R7","title":"Dispatch","text":"Can eliminate special behaviour make just like regular function call? Presumably easier changing dispatch rules ’ll call function UseMethod(). Need make precise arguments passed method. plot() least assumes works: intersect assignment within generic?","code":"foo <- function(x, y)  {   UseMethod(\"foo\") } foo.numeric <- function(x, y) {   deparse(substitute(x)) } x <- 10 foo(x) #> [1] \"x\""},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s3-3","dir":"Articles > Spec","previous_headings":"Inheritance","what":"S3","title":"Dispatch","text":".e. NextMethod() work: currently state recorded special variables like .Generic, etc. Can avoid confusion:","code":"foo <- function(x)  {   UseMethod(\"foo\") } foo.a <- function(x) {   x <- factor(\"x\")   NextMethod() } foo.b <- function(x) {   print(\"In B\")   print(class(x)) }  foo(structure(1, class = c(\"a\", \"b\"))) #> [1] \"In B\" #> [1] \"factor\""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s4","dir":"Articles > Spec","previous_headings":"Inheritance","what":"S4","title":"Dispatch","text":"Want avoid sort code, rely magic callGeneric() pass values current call.","code":"method(\"mean\", \"foofy\") <- function(x, ..., na.rm = TRUE) {   x <- x@values   callGeneric() }"},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"r7-3","dir":"Articles > Spec","previous_headings":"Inheritance","what":"R7","title":"Dispatch","text":"Can require generic object arguments make code easier reason ?","code":"method(\"mean\", \"POSIXct\") <- function(x) {   POSIXct(NextMethod(), tz = attr(x, \"tz\")) } # Explicit is nice: method(\"mean\", \"POSIXct\") <- function(x) {   POSIXct(NextMethod(\"mean\", x), tz = attr(x, \"tz\")) } # But what does this do? Is this just an error? method(\"mean\", \"POSIXct\") <- function(x) {   POSIXct(NextMethod(\"sd\", 10), tz = attr(x, \"tz\")) }"},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s3-4","dir":"Articles > Spec","previous_headings":"Group generics","what":"S3","title":"Dispatch","text":"Group generics (Math, Ops, Summary, Complex): exist internal generics. Looked final fallback.","code":"sloop::s3_dispatch(sum(Sys.time())) #>    sum.POSIXct #>    sum.POSIXt #>    sum.default #> => Summary.POSIXct #>    Summary.POSIXt #>    Summary.default #> -> sum (internal)"},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"r7-4","dir":"Articles > Spec","previous_headings":"Group generics","what":"R7","title":"Dispatch","text":"Keep .","code":""},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s3-5","dir":"Articles > Spec","previous_headings":"Double dispatch","what":"S3","title":"Dispatch","text":"Used Ops group generic. Basic process find method first second arguments. : , ok one internal, use Otherwise, warn use internal","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"r7-5","dir":"Articles > Spec","previous_headings":"Double dispatch","what":"R7","title":"Dispatch","text":"Goal use iterated dispatch implies asymmetry dispatch order. User responsible ensuring x + y equivalent y + x (types almost always , values likely different). vctrs, question remove inheritance double dispatch. already done vec_ptype2() vec_cast() coercion hierarchy often match class hierarchy. May also vec_arith().","code":"double_dispatch <- function(x, y, generic = \"+\") {   grid <- rev(expand.grid(sloop::s3_class(y), sloop::s3_class(x)))   writeLines(paste0(\"* \", generic, \".\", grid[[1]], \".\", grid[[2]])) }  ab <- structure(list(), class = c(\"a\", \"b\")) cd <- structure(list(), class = c(\"c\", \"d\"))  double_dispatch(ab, cd) #> * +.a.c #> * +.a.d #> * +.b.c #> * +.b.d double_dispatch(cd, ab) #> * +.c.a #> * +.c.b #> * +.d.a #> * +.d.b  double_dispatch(1, 1L) #> * +.double.integer #> * +.double.numeric #> * +.numeric.integer #> * +.numeric.numeric"},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s3-6","dir":"Articles > Spec","previous_headings":"Implicit class","what":"S3","title":"Dispatch","text":"UseMethod() recieves object without class attribute, uses implicit class, provided .class2(). made four rough categories: dimension, type, language, numeric. Note internal generics behave differently, instead immediately falling back default default case.","code":"# dimension class .class2(matrix(\"a\")) #> [1] \"matrix\"    \"array\"     \"character\" .class2(array(\"a\")) #> [1] \"array\"     \"character\"  # typeof(), with some renaming .class2(sum) #> [1] \"function\" .class2(quote(x)) #> [1] \"name\"  # language class .class2(quote({})) #> [1] \"{\" # similarly for if, while, for, =, <-, (  # numeric .class2(1) #> [1] \"double\"  \"numeric\""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"r7-6","dir":"Articles > Spec","previous_headings":"Implicit class","what":"R7","title":"Dispatch","text":"Suggest defining new r7class() function returns simplified implicit class, dropping language classes. Dispatch use rules R C. (performance implications?)","code":""},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"s3-7","dir":"Articles > Spec","previous_headings":"Multi-dispatch","what":"S3","title":"Dispatch","text":"Special dispatch? c(), cbind(), rbind() (+ cbind2() rbind2()) — iterated double dispatch. Need describe detail solid assessment R7 might need.ez gitDot-dot-dot dispatch, assumes class vctrs used two pass approach (find type coerce)","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/dispatch.html","id":"r7-7","dir":"Articles > Spec","previous_headings":"Multi-dispatch","what":"R7","title":"Dispatch","text":"Initially, don’t provide support user generics dispatch …? Instead suggest people use Reduce plus double-dispatch.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/proposal.html","id":"executive-summary","dir":"Articles > Spec","previous_headings":"","what":"Executive summary","title":"Proposal","text":"Object-oriented programming enables R developers implement abstractions, introduce domain-specific data models, interface external systems, among things. Unlike modern programming languages, R lacks dominant approach object-oriented programming. competition existing approaches unproductive contributes social fragmentation community technical hurdles integrating across different systems. propose form working group develop design proposal system combine important elements existing approaches remaining compatible . involve key technical experts community stakeholders, including R Core tidyverse. Upon publishing design proposal, invite entire community contribute feedback. Finally, conclude working group developing releasing strategy implementing, maintaining, adopting framework.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/proposal.html","id":"background","dir":"Articles > Spec","previous_headings":"","what":"Background","title":"Proposal","text":"R, everything object. principle facilitates interacting data, dataset modeled tangible, real world object. user can display contents object, introspect structure manipulate various ways. R provides basic types objects necessary statistical computing. effectively reason domain, like genomics, need specialize data types richly model semantics particular domain. specialized set data structures, recognize need /abstraction/, models commonality across data types. Abstraction also useful existing data types, package provide alternative implementation, example, based database distributed computing system. Abstraction requires system classification, object corresponds specific class, class derives another. classification system transcends class instances (objects), helpful explicitly refer classes programming. Fundamentally, class-based object-oriented system two requirements: * centrally defined class hierarchy, * Every object instance class. class defined contract governing structure contents. contract extends contract parent class order add semantics additional constraints remaining compatible parent contract. Code manipulating objects often make assumptions structure content objects. mitigate risk, low-level code benfits validation function, essentially codification class contract, verify assumptions. intrinsic value formal modeling data, software fully take advantage richer semantics, requires /polymorphism/, behavior software respect object depends class object. object-oriented languages implement message-passing OOP, classes define behavior holding functions, called methods, addition fields. one class calls method another class, passes message. R systems based message-passing, notably R6 package reference classes methods package. rely message-passing part objects mutable easier reason code can typically assume receiver mutated. exclude scope systems mutable objects, immutable objects generally preferable interactive data analysis, relegating mutable systems niche applications, GUIs caching mechanims. appropriate statistical computing language, R functional roots, prevalent object-oriented approaches R functional systems, namely S3 S4, corresponding third fourth version S language, respectively. Objects tend immutable, top-level functions can generic, means means dispatch another function, called method, based types passed arguments. simplest type generic dispatches single argument. single dispatch supports applications polymorphism, many cases behavior depends interaction two classes. Typical examples include arithmetic, converting object one class another combining two different types object. considerations, conclude good object-oriented system support: * explicit class hierarchy (represented reified objects) * Sytematic instance construction validation; * Multiple, least double, dispatch, * Objects transparent, introspectable structure.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/proposal.html","id":"problem-statement","dir":"Articles > Spec","previous_headings":"","what":"Problem statement","title":"Proposal","text":"two major OOP frameworks R, S3 S4, limitations, neither one sufficiently applicable gain dominance. led social fracturing community technical impediments compatibility interoperability. summarize limitations table . S3 defines classes implicitly instance level, explicit class hierarchy. S3 system supports tracking class every object, systematic means constructing validating ensure correctness. S3 supports single dispatch, difficult write polymorphic code arithmetic, merging objects, converting objects, etc. S4 solutions problems, quite ambitious, introducing significant complexity, unusual syntax loss transparency. Multiple inheritance, expressive powerful, allows multiple overlapping taxonomies, difficult reason , difficulty increases quadratically combined multiple dispatch, method selection uses distance calculation /n/ dimensions /n/ number arguments. syntax defining classes methods non-idiomatic relies side effects. Finally, S4 convention (although requirement) hide slots behind API, improves encapsulation prevents basic introspection capabilities desirable analyzing data R users come expect. Somewhat tangentionally, still motivating, also technical issues methods package, implementation S4 system. incremental growth decades led excessive complexity, well performance issues. absence new system, need reimplement S4, implementation effort regardless. Documentation limitations afflict S3 S4. difficult describe programming interface consists generic functions coupled class. package can define method generic extend class, documentation needs adapt according packages loaded.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/proposal.html","id":"proposal","dir":"Articles > Spec","previous_headings":"","what":"Proposal","title":"Proposal","text":"believe may better way, solutions obvious. Across popular programming languages, notable exception Julia, functional OOP much less common less well developed message-passing, examples R follow advances likely require research. Therefore, propose bring together panel experts formally assess situation design solution. Since aiming solution unify community, aim widespread adoption, require involvement key community leaders. invite community review proposal contribute feedback ideas. working group integrate feedback finalize proposal. conclude developing strategy implementation, adoption long-term maintenance, directly responsible. funding required requested effort.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/proposal.html","id":"objectives","dir":"Articles > Spec","previous_headings":"","what":"Objectives","title":"Proposal","text":"Release finalized design specification unifying object-oriented programming system, Recommend ISC strategy implementing maintaining system, well driving adoption.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/proposal.html","id":"milestones","dir":"Articles > Spec","previous_headings":"","what":"Milestones","title":"Proposal","text":"Finalize membership, Agree upon prioritize system requirements, Iterate design proposals, Release proposal community review contribution, Incorporate community contributions, Submit finalized proposal, Develop submit implementation adoption strategy.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/proposal.html","id":"membership","dir":"Articles > Spec","previous_headings":"","what":"Membership","title":"Proposal","text":"founding members : Michael Lawrence :: Representing R-core (S4-based) Bioconductor, maintainer methods package; Hadley Wickham :: Representing RStudio tidyverse project, relies heavily S3; Martin Maechler :: Representing R-core, maintainer S4-based Matrix Rmpfr packages, maintainer methods package. also invited representatives R Ladies ROpenSci communities. collaborate others R Core, keeping informed plans incorporating feedback.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"list-of-requirements","dir":"Articles > Spec","previous_headings":"","what":"List of requirements","title":"Requirements","text":"system compatible possible existing systems, particularly S3 Classes first class objects, extrinsic instances system support formal construction, casting, coercion create new instances classes. convenient systematically validate instance Double dispatch, possibly general multiple dispatch, supported Inheritance simple possible, ideally single (features might compensate lack multiple inheritance) Syntax intuitive idiomatic, rely side effects loose conventions Namespace management complicated S3 currently Performance competitive existing solutions design simple implement possible package define method generic classes defined outside package aim facilitate API evolution, particularly relates inter-package dependencies Methods must include formal arguments generic (like Julia) Generics support ... formal argument lists methods can append arguments lists Fields “public” visibility, support encapsulation (implicit getters setters) system support reflection system support lazy dynamic registration classes methods.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"compatibility","dir":"Articles > Spec","previous_headings":"","what":"Compatibility","title":"Requirements","text":"Ideally new system extension S3, S3 already bottom stack many systems compatibility S3.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"classes-as-first-class-objects","dir":"Articles > Spec","previous_headings":"","what":"Classes as first class objects","title":"Requirements","text":"important classes defined extrinsically instances, makes data contract obvious developers (reading code) users (interacting objects). S4 represents classes proper objects; however, typically developers refer classes name (string literal) interacting S4 API. Interacting directly objects instead likely simplify API (syntax) implementation.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"generics-as-extended-function-objects","dir":"Articles > Spec","previous_headings":"","what":"Generics as extended function objects","title":"Requirements","text":"Generic functions represented special class function object tracks method table. puts generic functions level classes, essence functional OOP, likely enable natural syntax method registration.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"formal-instantiation-and-type-conversion","dir":"Articles > Spec","previous_headings":"","what":"Formal instantiation and type conversion","title":"Requirements","text":"Class instantiation happen formal constructor. created, object keep original class unless subjected formal casting formal coercion. class object robust predictable, direct class assignment (e.g. class<-()) generally avoided.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"systematic-validation","dir":"Articles > Spec","previous_headings":"","what":"Systematic validation","title":"Requirements","text":"Class contracts often complicated simple list typed fields. formally supported convention around validating objects important code can make necessary assumptions data structures content. Otherwise, developers trying defensive resort ad hoc checks scattered throughout code.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"multiple-dispatch","dir":"Articles > Spec","previous_headings":"","what":"Multiple dispatch","title":"Requirements","text":"system least need support double dispatch, code can polymorphic interaction two arguments. many obvious examples: arithmetic, serialization (object, target), coercion, etc. less likely require dispatch beyond two arguments, advantages probably outweighed increase complexity. many cases triple dispatch higher wild, developers abusing dispatch implement type checks, instead polymorphism. Almost always, can deconstruct multiple dispatch series double dispatch calls. General multiple dispatch makes software harder understand difficult implement.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"inheritance","dir":"Articles > Spec","previous_headings":"","what":"Inheritance","title":"Requirements","text":"Inheritance lets us define data taxonomy, often natural organize set data structures multiple, orthogonal taxonomies. Multiple inheritance enables ; however, also adds lot complexity, software relying underlying system. often possible beneficial (long term) rely techniques like composition delegation instead. consider single inheritance languages like Java successful, although directly comparable functional system.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"syntax","dir":"Articles > Spec","previous_headings":"","what":"Syntax","title":"Requirements","text":"entire API free side effects odd conventions, like making . character significant method names. Whereas S3 supports implicit method registration based name method, new system require methods registered explicitly. Direct manipulation class generic objects enable .","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"namespaces","dir":"Articles > Spec","previous_headings":"","what":"Namespaces","title":"Requirements","text":"system support exporting generics classes. classes objects, can treated like object exporting importing symbols. generics objects, simple export methods generic. clear whether selective method export important. One use case hide method internal class signature avoid unnecessary documentation. Perhaps R CMD check ignore methods unexported classes. need explicit method registration.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"third-party-methods","dir":"Articles > Spec","previous_headings":"","what":"Third party methods","title":"Requirements","text":"fully realize potential interoperability afforded functional OOP, treating generics classes orthogonal, allow packages extend externally defined API supports externally defined classes. cases, method defined either owner generic owner class, “ownership” somewhat nebulous concept. acknowledge potential conflicts arising multiple packages defining methods generic overlapping signatures, well danger injecting new behaviors violate assumptions existing method definitions.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"formal-arguments","dir":"Articles > Spec","previous_headings":"","what":"Formal arguments","title":"Requirements","text":"formal arguments generic must present every method generic. contrast Julia, methods can completely different sets arguments. favor fixed set formal arguments sake consistency enable calling code depend minimal set arguments always present. generic formal argument list includes ..., methods can add arguments. extra arguments useful controlling specialized behaviors, long calling code can assume calling generic always dispatch method handles accordance documentation. accordance Liskov Substitution Principle, explore enforcing method adds arguments method dispatching parent class. easiest conceptualize useful single dispatch case, also able develop set rules nested multiple dispatch.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"field-visibility","dir":"Articles > Spec","previous_headings":"","what":"Field visibility","title":"Requirements","text":"Functional OOP incompatible notion private fields, code run context class, thus way accept deny access field. R users also expect appreciate object transparency. consider enabling encapsulation field access modification similar reference classes allow defining fields active bindings.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"reflection-and-dynamism","dir":"Articles > Spec","previous_headings":"","what":"Reflection and dynamism","title":"Requirements","text":"Given class generic, able find appropriate method without calling . important building tooling around system.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/articles/spec/requirements.html","id":"lazy-and-dynamic-registration","dir":"Articles > Spec","previous_headings":"","what":"Lazy and dynamic registration","title":"Requirements","text":"flip side, also able register method lazily/dynamically run-time. important : Generics classes suggested packages, method registration can occur dependency loaded. Testing, since may want define method within test. particularly useful used eliminate need mocking. Interface evolution, can provide method generic class yet exist, anticipating future release dependency.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Henrik Bengtsson. Author. Landau. Author. Michael Lawrence. Author. Martin Maechler. Author. Luke Tierney. Author. Gabriela De Queiroz. Author. Hadley Wickham. Author, maintainer. Jim Hester. Author.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bengtsson H, Landau W, Lawrence M, Maechler M, Tierney L, De Queiroz G, Wickham H, Hester J (2022). R7: New OO System R. https://RConsortium.github.io/OOP-WG, https://rconsortium.github.io/OOP-WG.","code":"@Manual{,   title = {R7: A New OO System for R},   author = {Henrik Bengtsson and Will Landau and Michael Lawrence and Martin Maechler and Luke Tierney and Gabriela {De Queiroz} and Hadley Wickham and Jim Hester},   year = {2022},   note = {https://RConsortium.github.io/OOP-WG, https://rconsortium.github.io/OOP-WG}, }"},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"r7","dir":"","previous_headings":"","what":"A New OO System for R","title":"A New OO System for R","text":"R7 package new OOP system designed successor S3 S4. designed implemented collaboratively RConsortium Object-oriented Programming Working Group, includes representatives R-Core, BioConductor, RStudio/tidyverse, wider R community.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A New OO System for R","text":"long-term goal project merge R7 base R. now, can experiment development version GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"r-consortium/OOP-WG\")"},{"path":"https://RConsortium.github.io/OOP-WG/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A New OO System for R","text":"","code":"library(R7)  # Define a class Range <- new_class(\"Range\",   properties = list(start = \"numeric\", end = \"numeric\"),   validator = function(x) {     if (length(x@start) != 1) {       \"@start must be length 1\"     } else if (length(x@end) != 1) {       \"@end must be length 1\"     } else if (x@end < x@start) {       \"@end must be greater than or equal to @start\"     }   } )  # Create an object from that class x <- Range(start = 1, end = 10) x #> <Range/R7_object> #> @ start:  num 1 #> @ end  :  num 10  # Get and set properties x@start #> [1] 1 x@end <- 20 x #> <Range/R7_object> #> @ start:  num 1 #> @ end  :  num 20  # Can't set invalid properties x@end <- \"x\" #> Error: <Range>@end must be of class <integer> or <double>, not <character> x@end <- -1 #> Error: <Range> object is invalid: #> - @end must be greater than or equal to @start  # Define methods for existing S3 generics method(format, Range) <- function(x, ...) paste0(\"[\", x@start, \", \", x@end, \"]\") format(x) #> [1] \"[1, 20]\"  method(mean, Range) <- function(x, ...) (x@start + x@end) / 2 mean(x) #> [1] 10.5  # Create a new generic inside <- new_generic(\"inside\", \"x\", function(x, y) {   # Actually finds and calls the appropriate method   method_call() }) # Add a method for our class method(inside, Range) <- function(x, y) y >= x@start & y <= x@end inside #> <R7_generic> function (x, y)  with 1 methods: #> 1: method(inside, Range)  inside(x, c(0, 5, 10, 15)) #> [1] FALSE  TRUE  TRUE  TRUE"},{"path":"https://RConsortium.github.io/OOP-WG/reference/as_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard class specifications — as_class","title":"Standard class specifications — as_class","text":"used interface R7 R's OO systems, allowing use R7 classes methods base types, informal S3 classes, formal S4 classes.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/as_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard class specifications — as_class","text":"","code":"as_class(x, arg = deparse(substitute(x)))"},{"path":"https://RConsortium.github.io/OOP-WG/reference/as_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard class specifications — as_class","text":"x class specification. One following: R7 class (created new_class()). R7 union (created new_union()). S3 class (created new_S3_class()). S4 class (created methods::getClass() methods::new()). base type specified either constructor (logical, integer, double etc) name (\"logical\", \"integer\", \"double\" etc). base union type specified name: \"numeric\", \"atomic\", \"vector\". \"special\", either missing_class any_class. arg Argument name used generating errors.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/as_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard class specifications — as_class","text":"standardised class: either NULL, R7 class, R7 union, new_S3_class, S4 class.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a R7 method for a generic — method<-","title":"Register a R7 method for a generic — method<-","text":"generic defines interface function. created generic new_generic(), provide implementations specific signatures registering methods method<- goal method<- single function need working R7 generics R7 classes. means well registering methods R7 classes R7 generics, can also register methods R7 classes S3 S4 generics, S3 S4 classes R7 generics. general method registration function: least one generic signature needs R7.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a R7 method for a generic — method<-","text":"","code":"method(generic, signature) <- value"},{"path":"https://RConsortium.github.io/OOP-WG/reference/method-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a R7 method for a generic — method<-","text":"generic generic function, either created new_generic(), new_external_generic(), existing S3 generic. signature method signature. R7 generics use single dispatch, one following: R7 class (created new_class()). R7 union (created new_union()). S3 class (created new_S3_class()). S4 class (created methods::getClass() methods::new()). base type specified either constructor (logical, integer, double etc) name (\"logical\", \"integer\", \"double\" etc). base union type specified name: \"numeric\", \"atomic\", \"vector\". R7 generics use multiple dispatch, can list types. S3 generics, must R7 class. value function implements generic specification given signature.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a R7 method for a generic — method<-","text":"","code":"# Create a generic bizarro <- new_generic(\"bizarro\", \"x\") # Register some methods method(bizarro, \"numeric\") <- function(x) rev(x) method(bizarro, new_S3_class(\"data.frame\")) <- function(x) {   x[] <- lapply(x, bizarro)   rev(x) }  # Using a generic calls the methods automatically bizarro(head(mtcars)) #>                   carb gear am vs  qsec    wt drat  hp disp cyl  mpg #> Mazda RX4            1    3  0  1 20.22 3.460 2.76 105  225   6 18.1 #> Mazda RX4 Wag        2    3  0  0 17.02 3.440 3.15 175  360   8 18.7 #> Datsun 710           1    3  0  1 19.44 3.215 3.08 110  258   6 21.4 #> Hornet 4 Drive       1    4  1  1 18.61 2.320 3.85  93  108   4 22.8 #> Hornet Sportabout    4    4  1  0 17.02 2.875 3.90 110  160   6 21.0 #> Valiant              4    4  1  0 16.46 2.620 3.90 110  160   6 21.0"},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a method for an R7 generic — method","title":"Retrieve a method for an R7 generic — method","text":"method() takes generic signature retrieves corresponding method. rarely needed time rely generic, via method_call(), find call method . However, introspection useful want see implementation specific method.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a method for an R7 generic — method","text":"","code":"method(generic, class = NULL, object = NULL)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a method for an R7 generic — method","text":"generic generic function, either created new_generic(), new_external_generic(), existing S3 generic. class, object Perform introspection either classes (processed as_class()) concrete objects. generic multiple dispatch object class need wrapped list.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a method for an R7 generic — method","text":"function class <R7_method>.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a method for an R7 generic — method","text":"","code":"# Create a generic and register some methods bizarro <- new_generic(\"bizarro\", \"x\") method(bizarro, \"numeric\") <- function(x) rev(x) method(bizarro, new_S3_class(\"factor\")) <- function(x) {   levels(x) <- rev(levels(x))   x }  # Printing the generic shows the registered method bizarro #> <R7_generic> function (x, ...)  with 3 methods: #> 1: method(bizarro, \"integer\") #> 2: method(bizarro, \"double\") #> 3: method(bizarro, new_S3_class(\"factor\"))  # And you can use method() to inspect specific implementations method(bizarro, class = \"integer\") #> <R7_method> method(bizarro, \"integer\") #> function (x)  #> rev(x) #> <environment: 0x55c889d04730> method(bizarro, object = 1) #> <R7_method> method(bizarro, \"double\") #> function (x)  #> rev(x) #> <environment: 0x55c889d04730> method(bizarro, new_S3_class(\"factor\")) #> <R7_method> method(bizarro, new_S3_class(\"factor\")) #> function (x)  #> { #>     levels(x) <- rev(levels(x)) #>     x #> } #> <environment: 0x55c889d04730>"},{"path":"https://RConsortium.github.io/OOP-WG/reference/missing_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Special dispatch types — missing_class","title":"Special dispatch types — missing_class","text":"Use missing_class user supplied argument Use any_class default method called methods matched","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/missing_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special dispatch types — missing_class","text":"","code":"missing_class  any_class"},{"path":"https://RConsortium.github.io/OOP-WG/reference/missing_class.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Special dispatch types — missing_class","text":"object class R7_missing length 0. object class R7_any length 0.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/missing_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Special dispatch types — missing_class","text":"","code":"foo <- new_generic(\"foo\", \"x\") method(foo, integer) <- function(x) \"integer\" method(foo, missing_class) <- function(x) \"missing\" method(foo, any_class) <- function(x) \"fallback\"  foo(1) #> [1] \"fallback\" foo() #> [1] \"missing\" foo(\"x\") #> [1] \"fallback\""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_S3_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare an S3 class — new_S3_class","title":"Declare an S3 class — new_S3_class","text":"use S3 class R7, must explicitly declare using new_S3_class() S3 lacks formal class definition.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_S3_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare an S3 class — new_S3_class","text":"","code":"new_S3_class(class, constructor = NULL, validator = NULL)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_S3_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare an S3 class — new_S3_class","text":"class S3 class vector (.e. class() returns). method registration, can abbreviate single string, S3 class name. constructor optional constructor can used create objects specified class. needed wish R7 class inherit S3 class. must specified way R7 constructor: first argument .data (base type whose attributes modified). arguments constructor default values constructor called arguments, returns returns \"empty\", valid, object. validator optional validator used validate() check R7 object adheres constraints S3 class. validator single argument function takes object validate returns NULL object valid. object invalid, returns character vector problems.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_S3_class.html","id":"method-dispatch-properties-and-unions","dir":"Reference","previous_headings":"","what":"Method dispatch, properties, and unions","title":"Declare an S3 class — new_S3_class","text":"three ways using S3 R7 require S3 class vector: Registering S3 method R7 generic. Restricting R7 property S3 class. Using S3 class R7 union. easy, can usually include new_S3_class() call inline:","code":"method(my_generic, new_S3_class(\"factor\")) <- function(x) \"A factor\" new_class(\"my_class\", properties = list(types = new_S3_class(\"factor\"))) new_union(\"character\", new_S3_class(\"factor\"))"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_S3_class.html","id":"extending-an-s-class","dir":"Reference","previous_headings":"","what":"Extending an S3 class","title":"Declare an S3 class — new_S3_class","text":"Creating R7 class extends S3 class requires work. also need provide constructor S3 class follows R7 conventions. means first argument constructor .data, followed one argument attribute used class. can awkward base S3 classes usually heavily wrapped user convenience low level constructor available. example, factor class integer vector character vector levels, base R function takes integer vector values character vector levels, verifies consistent, creates factor object. may optionally want also provide validator function ensure validate() confirms validity R7 classes build class. Unlike R7 validator, responsible validating types attributes. following code shows might wrap base Date class. Date numeric vector class Date can constructed .Date().","code":"S3_Date <- new_S3_class(\"Date\",   function(.data = integer()) {     .Date(.data)   },   function(object) {     if (!is.numeric(object)) {       \"Underlying data must be numeric\"     }   } )"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new R7 class — new_class","title":"Define a new R7 class — new_class","text":"class specifies properties (data) objects possess. class, parent, determines method used object passed generic.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new R7 class — new_class","text":"","code":"new_class(   name,   parent = R7_object,   properties = list(),   constructor = NULL,   validator = NULL )  new_object(.parent, ...)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new R7 class — new_class","text":"name name class, string. parent parent class inherit behavior . four options: R7 class, like R7_object. S3 class wrapped new_S3_class(). base type, like logical, double, character. properties list specifying properties (data) every object class possess. property can either named string (specifying class), call new_property(), allowing greater flexibility. constructor constructor function. Advanced use . custom constructor call new_object() create R7 object. first argument, .data, instance parent class. subsequent arguments used set properties. validator function taking single argument, self, object validate. job validator determine whether object valid, .e. current property values form allowed combination. types properties always automatically validated job validator verify value individual properties ok (.e. maybe property length 1, always positive), combination values multiple properties ok. called construction whenever property set. validator return NULL object valid. , return character vector element describes single problem. generally helpful report many problems possible. See validate() details examples. .parent, ... Parent object named properties used construct object.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a new R7 class — new_class","text":"object constructor, function can used create objects given class.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a new R7 class — new_class","text":"","code":"# Create an class that represents a range using a numeric start and end range <- new_class(\"range\",   properties = list(     start = \"numeric\",     end = \"numeric\"   ) ) r <- range(start = 10, end = 20) r #> <range> #> @ start:  num 10 #> @ end  :  num 20 # get and set properties with @ r@start #> [1] 10 r@end <- 40 r@end #> [1] 40  # R7 automatically ensures that properties are of the declared types: try(range(start = \"hello\", end = 20)) #> Error : <range> object properties are invalid: #> - @start must be <integer> or <double>, not <character>  # But we might also want to use a validator to ensure that start and end # are length 1, and that start is < end range <- new_class(\"range\",   properties = list(     start = \"numeric\",     end = \"numeric\"   ),   validator = function(self) {     if (length(self@start) != 1) {       \"@start must be a single number\"     } else if (length(self@end) != 1) {       \"@end must be a single number\"     } else if (self@end < self@start) {       \"@end must be great than or equal to @start\"     }   } ) try(range(start = c(10, 15), end = 20)) #> Error : <range> object is invalid: #> - @start must be a single number try(range(start = 20, end = 10)) #> Error : <range> object is invalid: #> - @end must be great than or equal to @start  r <- range(start = 10, end = 20) try(r@start <- 25) #> Error : <range> object is invalid: #> - @end must be great than or equal to @start"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_external_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generics in suggested packages — new_external_generic","title":"Generics in suggested packages — new_external_generic","text":"easiest way define method generic another package add package Imports import generic NAMESPACE. , however, creates strong dependency package, always desired. example, might want register knitr::knitr_print method customise object printed Rmd, package use anything else knitr. Instead, can add package Suggests use new_external_generic() along external_methods_register() declare \"external\" generic. new_external_generic() defines \"shape\" generic without requiring package available. call external_methods_register() .onLoad() dynamically register methods package loaded.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_external_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generics in suggested packages — new_external_generic","text":"","code":"new_external_generic(package, name, dispatch_args, version = NULL)  external_methods_register()"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_external_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generics in suggested packages — new_external_generic","text":"package Package generic defined . name Name generic, string. dispatch_args Character vector giving arguments used dispatch. version optional version package must meet method registered.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new generic — new_generic","title":"Define a new generic — new_generic","text":"generic function uses different implementations (methods) depending class one arguments (signature). Create new generic new_generic() use method<- add methods . Method dispatch performed method_call(), must always included body generic, cases new_generic() generate .","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new generic — new_generic","text":"","code":"new_generic(name, dispatch_args, fun = NULL)  method_call()"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new generic — new_generic","text":"name name generic. object assign . dispatch_args character vector giving names one arguments used find method. fun optional specification generic, must call method_call() dispatch methods. usually generated automatically dispatch_args, may want supply want add additional required arguments, omit ..., perform standardised computation generic. dispatch_args must first arguments fun, , present, ... must immediately follow .","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":"dispatch-arguments","dir":"Reference","previous_headings":"","what":"Dispatch arguments","title":"Define a new generic — new_generic","text":"arguments used pick method called dispatch arguments. cases, one argument, case generic said use single dispatch. consists one argument, said use multiple dispatch. two restrictions dispatch arguments: must first arguments generic generic uses ..., must occur immediately dispatch arguments.","code":""},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a new generic — new_generic","text":"","code":"# A simple generic with methods for some base types and S3 classes type_of <- new_generic(\"type_of\", dispatch_args = \"x\") method(type_of, \"character\") <- function(x, ...) \"A character vector\" method(type_of, new_S3_class(\"data.frame\")) <- function(x, ...) \"A data frame\" method(type_of, \"function\") <- function(x, ...) \"A function\"  type_of(mtcars) #> [1] \"A data frame\" type_of(letters) #> [1] \"A character vector\" type_of(mean) #> [1] \"A function\"  # If you want to require that methods implement additional arguments, # you can use a custom function: mean2 <- new_generic(\"mean2\", \"x\", function(x, ..., na.rm = FALSE) {    method_call() })  method(mean2, \"numeric\") <- function(x, ..., na.rm = FALSE) {   if (na.rm) {     x <- x[!is.na(x)]   }   sum(x) / length(x) }  # You'll be warned if you forget the argument: method(mean2, \"character\") <- function(x, ...) {   stop(\"Not supported\") } #> Warning: mean2(<character>) doesn't have argument `na.rm`"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_property.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new property — new_property","title":"Define a new property — new_property","text":"property defines named component object. Properties typically used store (meta) data object, often limited data specific class. specifying getter /setter, can make property \"dynamic\" computed accessed non-standard behaviour modified.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_property.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new property — new_property","text":"","code":"new_property(   name,   class = any_class,   getter = NULL,   setter = NULL,   default = NULL )"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_property.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new property — new_property","text":"name Property name, primarily used error messages. class specified, values must one classes (class union). getter optional function used get value. function take self  sole argument return value. property class class value validated. setter optional function used set value. function take self value return modified object. value automatically checked. default object created property supplied, default ? NULL, defaults \"empty\" instance class.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_property.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a new property — new_property","text":"","code":"# Simple properties store data inside an object pizza <- new_class(\"pizza\", properties = list(   new_property(\"slices\", \"numeric\", default = 10) )) my_pizza <- pizza(slices = 6) my_pizza@slices #> [1] 6 my_pizza@slices <- 5 my_pizza@slices #> [1] 5  your_pizza <- pizza() your_pizza@slices #> [1] 10  # Dynamic properties can compute on demand clock <- new_class(\"clock\", properties = list(   new_property(\"now\", getter = function(self) Sys.time()) )) my_clock <- clock() my_clock@now; Sys.sleep(1) #> [1] \"2022-02-22 17:04:29 UTC\" my_clock@now #> [1] \"2022-02-22 17:04:30 UTC\"  # These can be useful if you want to deprecate a property person <- new_class(\"person\", properties = list(   first_name = \"character\",   new_property(      \"firstName\",      getter = function(self) {        warning(\"@firstName is deprecated; please use @first_name instead\")        self@first_name      },      setter = function(self, value) {        warning(\"@firstName is deprecated; please use @first_name instead\")        self@first_name <- value        self      }    ) )) hadley <- person(first_name = \"Hadley\") hadley@firstName #> Warning: @firstName is deprecated; please use @first_name instead #> [1] \"Hadley\" hadley@first_name #> [1] \"Hadley\""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a class union — new_union","title":"Define a class union — new_union","text":"class union represents list possible classes. can used two places: allow property one set classes, new_property(\"x\", new_union(\"integer\", Range)). convenient short-hand define methods multiple classes. method(foo, new_union(X, Y)) <- f short-hand method(foo, X) <- f; method(foo, Y) <- foo R7 includes built-unions \"numeric\" (integer double vectors), \"atomic\" (logical, numeric, character, raw vectors) \"vector\" (atomic vectors, lists, expressions).","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a class union — new_union","text":"","code":"new_union(...)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a class union — new_union","text":"... classes include union. See as_class() permitted definitions","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/new_union.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a class union — new_union","text":"","code":"logical_or_character <- new_union(\"logical\", \"character\") logical_or_character #> <R7_union>: <logical> or <character>  Foo <- new_class(\"Foo\", properties = list(x = logical_or_character)) Foo(x = TRUE) #> <Foo> #> @ x:  logi TRUE Foo(x = letters[1:5]) #> <Foo> #> @ x:  chr [1:5] \"a\" \"b\" \"c\" \"d\" \"e\" try(Foo(1:3)) #> Error : <Foo> object properties are invalid: #> - @x must be <logical> or <character>, not <integer>  bar <- new_generic(\"bar\", \"x\") # Use built-in union method(bar, \"atomic\") <- function(x) \"Hi!\" bar #> <R7_generic> function (x, ...)  with 6 methods: #> 1: method(bar, \"integer\") #> 2: method(bar, \"complex\") #> 3: method(bar, \"double\") #> 4: method(bar, \"character\") #> 5: method(bar, \"logical\") #> 6: method(bar, \"raw\") bar(TRUE) #> [1] \"Hi!\" bar(letters) #> [1] \"Hi!\" try(bar(NULL)) #> Error : Can't find method for generic `bar()` with dispatch classes: #> - x: NULL, ANY"},{"path":"https://RConsortium.github.io/OOP-WG/reference/next_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the next applicable method after the current one — next_method","title":"Retrieve the next applicable method after the current one — next_method","text":"Retrieve next applicable method current one","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/next_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the next applicable method after the current one — next_method","text":"","code":"next_method()"},{"path":"https://RConsortium.github.io/OOP-WG/reference/object_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the R7 class of an object — object_class","title":"Retrieve the R7 class of an object — object_class","text":"Retrieve R7 class object","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/object_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the R7 class of an object — object_class","text":"","code":"object_class(object)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/object_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the R7 class of an object — object_class","text":"object R7 object","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/set a property — prop","title":"Get/set a property — prop","text":"prop(x, \"name\") / prop@name get value property, erroring property exist. prop(x, \"name\") <- value / prop@name <- value set value property.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/set a property — prop","text":"","code":"prop(object, name)  prop(object, name, check = TRUE) <- value  object@name"},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/set a property — prop","text":"object object R7 class name name parameter character. Partial matching performed. check TRUE, check value correct type run validate() object returning. value new value property. object automatically checked validity replacement done.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/set a property — prop","text":"","code":"horse <- new_class(\"horse\", properties = list(   name = \"character\",   colour = \"character\",   height = \"numeric\" )) lexington <- horse(colour = \"bay\", height = 15, name = \"Lex\") lexington@colour #> [1] \"bay\" prop(lexington, \"colour\") #> [1] \"bay\"  lexington@height <- 14 prop(lexington, \"height\") <- 15"},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Property introspection — prop_names","title":"Property introspection — prop_names","text":"prop_names(x) returns names properties prop_exists(x, \"prop\") returns TRUE iif x property prop.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Property introspection — prop_names","text":"","code":"prop_names(object)  prop_exists(object, name)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/prop_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Property introspection — prop_names","text":"object object R7 class name name parameter character. Partial matching performed.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/props.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/set multiple properties — props","title":"Get/set multiple properties — props","text":"props(x) returns properties. props(x) <- list(name1 = val1, name2 = val2) sets multiple properties.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/props.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/set multiple properties — props","text":"","code":"props(object)  props(object) <- value"},{"path":"https://RConsortium.github.io/OOP-WG/reference/props.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/set multiple properties — props","text":"object object R7 class value named list values. object checked validity replacements performed.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/props.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/set multiple properties — props","text":"","code":"horse <- new_class(\"horse\", properties = list(   name = \"character\",   colour = \"character\",   height = \"numeric\" )) lexington <- horse(colour = \"bay\", height = 15, name = \"Lex\")  props(lexington) #> $name #> [1] \"Lex\" #>  #> $colour #> [1] \"bay\" #>  #> $height #> [1] 15 #>  props(lexington) <- list(height = 14, name = \"Lexigonton\") lexington #> <horse> #> @ name  :  chr \"Lexigonton\" #> @ colour:  chr \"bay\" #> @ height:  num 14"},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/set underlying ","title":"Get/set underlying ","text":"R7 class inherits existing base type, can useful work underlying object, .e. R7 object stripped class properties.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/set underlying ","text":"","code":"R7_data(object)  R7_data(object, check = TRUE) <- value"},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/set underlying ","text":"object object R7 class check TRUE, check value correct type run validate() object returning. value Object used replace underlying data.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get/set underlying ","text":"","code":"text <- new_class(\"text\", parent = \"character\") y <- text(c(foo = \"bar\")) str(R7_data(y)) #>  Named chr \"bar\" #>  - attr(*, \"names\")= chr \"foo\""},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Base R7 class — R7_object","title":"Base R7 class — R7_object","text":"Base R7 class","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/r7_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base R7 class — R7_object","text":"","code":"R7_object()"},{"path":"https://RConsortium.github.io/OOP-WG/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an R7 object — validate","title":"Validate an R7 object — validate","text":"validate() ensures R7 object valid calling validator provided new_class(). done automatically constructing new objects modifying properties. valid_eventually() disables validation, modifies object, revalidates. useful sequence operations otherwise lead object temporarily invalid, repeated property modification causes performance bottleneck validator relatively expensive. valid_implicitly() validate object end. used rarely, performance critical code certain sequence operations produce invalid object.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an R7 object — validate","text":"","code":"validate(object, properties = TRUE)  valid_eventually(object, fun)  valid_implicitly(object, fun)"},{"path":"https://RConsortium.github.io/OOP-WG/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an R7 object — validate","text":"object R7 object properties TRUE, default, checks property types executing validator. fun function call object validation.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate an R7 object — validate","text":"","code":"# A range class might validate that the start is less than the end Range <- new_class(\"Range\",   properties = list(start = \"double\", end = \"double\"),   validator = function(self) {     if (self@start >= self@end) \"start must be smaller than end\"   } ) # You can't construct an invalid object: try(Range(1, 1)) #> Error : <Range> object is invalid: #> - start must be smaller than end  # And you can't create an invalid object with @<- r <- Range(1, 2) try(r@end <- 1) #> Error : <Range> object is invalid: #> - start must be smaller than end  # But what if you want to move a range to the right? rightwards <- function(r, x) {   r@start <- r@start + x   r@end <- r@end + x   r } # This function doesn't work because it creates a temporarily invalid state try(rightwards(r, 10)) #> Error : <Range> object is invalid: #> - start must be smaller than end  # This is the perfect use case for valid_eventually(): rightwards <- function(r, x) {   valid_eventually(r, function(object) {     object@start <- object@start + x     object@end <- object@end + x     object   }) } rightwards(r, 10) #> <Range> #> @ start:  num 11 #> @ end  :  num 12  # Alternatively, you can set multiple properties at once using props<-, # which validates once at the end rightwards <- function(r, x) {   props(r) <- list(start = r@start + x, end = r@end + x)   r } rightwards(r, 20) #> <Range> #> @ start:  num 21 #> @ end  :  num 22"},{"path":[]},{"path":"https://RConsortium.github.io/OOP-WG/news/index.html","id":"feb-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Feb 2022","title":"R7 0.0.0.9000","text":"new_generic() now requires dispatch_args (180). means new_generic() typically called without names. Either new_generic(\"foo\", \"x\") “standard” generic, new_generic(\"foo\", \"x\", function(x, y) call_method()) non-standard method. creating class, unspecified properties initialized default value (#67). DISCUSS: achieve , constructor arguments default missing_class. any_class missing_any make possible dispatch absent arguments arguments class (#67). new_external_generic() now requires dispatch_args can eagerly check signature. Revamp website. README now shows brief example info vignette(\"R7\"). Initial design docs minutes now articles appear website.","code":""},{"path":"https://RConsortium.github.io/OOP-WG/news/index.html","id":"jan-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Jan 2022","title":"R7 0.0.0.9000","text":"New props<- setting multiple properties simultaneously validating afterwards (#149). Validation now happens recursively, validates types validating object (#149) Classes (base types, S3, S4, R7) handled consistently wherever used. Strings now refer base types. New explicit new_S3_class() referring S3 classes (#134). S4 unions converted R7 unions (#150). Base numeric, atomic, vector “types” now represented class unions (#147). Different evaluation mechanism method dispatch, greater restrictions dispatch args (#141) x@.data -> R7_data(); probably replaced casting. generic, signature -> dispatch_args. Polished str() print() methods new_class() properties 3rd argument (instead constructor).","code":""}]
